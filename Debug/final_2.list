
final_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004198  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800437c  0800437c  0001437c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043d4  080043d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080043d4  080043d4  000143d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043dc  080043dc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043dc  080043dc  000143dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043e0  080043e0  000143e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080043e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  080043f0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  080043f0  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b010  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b66  00000000  00000000  0002b045  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd0  00000000  00000000  0002cbb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be8  00000000  00000000  0002d880  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c165  00000000  00000000  0002e468  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000095cf  00000000  00000000  0004a5cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a2c3d  00000000  00000000  00053b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f67d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035d4  00000000  00000000  000f6854  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08004364 	.word	0x08004364

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08004364 	.word	0x08004364

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b974 	b.w	8000524 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	468c      	mov	ip, r1
 800025a:	4604      	mov	r4, r0
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d14b      	bne.n	80002fa <__udivmoddi4+0xa6>
 8000262:	428a      	cmp	r2, r1
 8000264:	4615      	mov	r5, r2
 8000266:	d967      	bls.n	8000338 <__udivmoddi4+0xe4>
 8000268:	fab2 f282 	clz	r2, r2
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0720 	rsb	r7, r2, #32
 8000272:	fa01 f302 	lsl.w	r3, r1, r2
 8000276:	fa20 f707 	lsr.w	r7, r0, r7
 800027a:	4095      	lsls	r5, r2
 800027c:	ea47 0c03 	orr.w	ip, r7, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000286:	fbbc f7fe 	udiv	r7, ip, lr
 800028a:	fa1f f885 	uxth.w	r8, r5
 800028e:	fb0e c317 	mls	r3, lr, r7, ip
 8000292:	fb07 f908 	mul.w	r9, r7, r8
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800029c:	4599      	cmp	r9, r3
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x60>
 80002a0:	18eb      	adds	r3, r5, r3
 80002a2:	f107 31ff 	add.w	r1, r7, #4294967295
 80002a6:	f080 811c 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002aa:	4599      	cmp	r9, r3
 80002ac:	f240 8119 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002b0:	3f02      	subs	r7, #2
 80002b2:	442b      	add	r3, r5
 80002b4:	eba3 0309 	sub.w	r3, r3, r9
 80002b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c0:	fb00 f108 	mul.w	r1, r0, r8
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ca:	42a1      	cmp	r1, r4
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0x8e>
 80002ce:	192c      	adds	r4, r5, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 8107 	bcs.w	80004e6 <__udivmoddi4+0x292>
 80002d8:	42a1      	cmp	r1, r4
 80002da:	f240 8104 	bls.w	80004e6 <__udivmoddi4+0x292>
 80002de:	3802      	subs	r0, #2
 80002e0:	442c      	add	r4, r5
 80002e2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e6:	2700      	movs	r7, #0
 80002e8:	1a64      	subs	r4, r4, r1
 80002ea:	b11e      	cbz	r6, 80002f4 <__udivmoddi4+0xa0>
 80002ec:	2300      	movs	r3, #0
 80002ee:	40d4      	lsrs	r4, r2
 80002f0:	e9c6 4300 	strd	r4, r3, [r6]
 80002f4:	4639      	mov	r1, r7
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xbe>
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f000 80ec 	beq.w	80004dc <__udivmoddi4+0x288>
 8000304:	2700      	movs	r7, #0
 8000306:	e9c6 0100 	strd	r0, r1, [r6]
 800030a:	4638      	mov	r0, r7
 800030c:	4639      	mov	r1, r7
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f783 	clz	r7, r3
 8000316:	2f00      	cmp	r7, #0
 8000318:	d148      	bne.n	80003ac <__udivmoddi4+0x158>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd0>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80fb 	bhi.w	800051a <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469c      	mov	ip, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa0>
 8000332:	e9c6 4c00 	strd	r4, ip, [r6]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xe8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 808f 	bne.w	8000464 <__udivmoddi4+0x210>
 8000346:	2701      	movs	r7, #1
 8000348:	1b49      	subs	r1, r1, r5
 800034a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800034e:	fa1f f985 	uxth.w	r9, r5
 8000352:	fbb1 fef8 	udiv	lr, r1, r8
 8000356:	fb08 111e 	mls	r1, r8, lr, r1
 800035a:	fb09 f00e 	mul.w	r0, r9, lr
 800035e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000362:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000366:	4298      	cmp	r0, r3
 8000368:	d907      	bls.n	800037a <__udivmoddi4+0x126>
 800036a:	18eb      	adds	r3, r5, r3
 800036c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x124>
 8000372:	4298      	cmp	r0, r3
 8000374:	f200 80cd 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000378:	468e      	mov	lr, r1
 800037a:	1a1b      	subs	r3, r3, r0
 800037c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000380:	fb08 3310 	mls	r3, r8, r0, r3
 8000384:	fb09 f900 	mul.w	r9, r9, r0
 8000388:	b2a4      	uxth	r4, r4
 800038a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038e:	45a1      	cmp	r9, r4
 8000390:	d907      	bls.n	80003a2 <__udivmoddi4+0x14e>
 8000392:	192c      	adds	r4, r5, r4
 8000394:	f100 33ff 	add.w	r3, r0, #4294967295
 8000398:	d202      	bcs.n	80003a0 <__udivmoddi4+0x14c>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f200 80b6 	bhi.w	800050c <__udivmoddi4+0x2b8>
 80003a0:	4618      	mov	r0, r3
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80003aa:	e79e      	b.n	80002ea <__udivmoddi4+0x96>
 80003ac:	f1c7 0520 	rsb	r5, r7, #32
 80003b0:	40bb      	lsls	r3, r7
 80003b2:	fa22 fc05 	lsr.w	ip, r2, r5
 80003b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ba:	fa21 f405 	lsr.w	r4, r1, r5
 80003be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c2:	fbb4 f9fe 	udiv	r9, r4, lr
 80003c6:	fa1f f88c 	uxth.w	r8, ip
 80003ca:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ce:	fa20 f305 	lsr.w	r3, r0, r5
 80003d2:	40b9      	lsls	r1, r7
 80003d4:	fb09 fa08 	mul.w	sl, r9, r8
 80003d8:	4319      	orrs	r1, r3
 80003da:	0c0b      	lsrs	r3, r1, #16
 80003dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	fa02 f207 	lsl.w	r2, r2, r7
 80003e6:	fa00 f307 	lsl.w	r3, r0, r7
 80003ea:	d90b      	bls.n	8000404 <__udivmoddi4+0x1b0>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f4:	f080 8088 	bcs.w	8000508 <__udivmoddi4+0x2b4>
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	f240 8085 	bls.w	8000508 <__udivmoddi4+0x2b4>
 80003fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000402:	4464      	add	r4, ip
 8000404:	eba4 040a 	sub.w	r4, r4, sl
 8000408:	fbb4 f0fe 	udiv	r0, r4, lr
 800040c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000410:	fb00 fa08 	mul.w	sl, r0, r8
 8000414:	b289      	uxth	r1, r1
 8000416:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800041a:	45a2      	cmp	sl, r4
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x1dc>
 800041e:	eb1c 0404 	adds.w	r4, ip, r4
 8000422:	f100 31ff 	add.w	r1, r0, #4294967295
 8000426:	d26b      	bcs.n	8000500 <__udivmoddi4+0x2ac>
 8000428:	45a2      	cmp	sl, r4
 800042a:	d969      	bls.n	8000500 <__udivmoddi4+0x2ac>
 800042c:	3802      	subs	r0, #2
 800042e:	4464      	add	r4, ip
 8000430:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000434:	fba0 8902 	umull	r8, r9, r0, r2
 8000438:	eba4 040a 	sub.w	r4, r4, sl
 800043c:	454c      	cmp	r4, r9
 800043e:	4641      	mov	r1, r8
 8000440:	46ce      	mov	lr, r9
 8000442:	d354      	bcc.n	80004ee <__udivmoddi4+0x29a>
 8000444:	d051      	beq.n	80004ea <__udivmoddi4+0x296>
 8000446:	2e00      	cmp	r6, #0
 8000448:	d069      	beq.n	800051e <__udivmoddi4+0x2ca>
 800044a:	1a5a      	subs	r2, r3, r1
 800044c:	eb64 040e 	sbc.w	r4, r4, lr
 8000450:	fa04 f505 	lsl.w	r5, r4, r5
 8000454:	fa22 f307 	lsr.w	r3, r2, r7
 8000458:	40fc      	lsrs	r4, r7
 800045a:	431d      	orrs	r5, r3
 800045c:	e9c6 5400 	strd	r5, r4, [r6]
 8000460:	2700      	movs	r7, #0
 8000462:	e747      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000464:	4095      	lsls	r5, r2
 8000466:	f1c2 0320 	rsb	r3, r2, #32
 800046a:	fa21 f003 	lsr.w	r0, r1, r3
 800046e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000472:	fbb0 f7f8 	udiv	r7, r0, r8
 8000476:	fa1f f985 	uxth.w	r9, r5
 800047a:	fb08 0017 	mls	r0, r8, r7, r0
 800047e:	fa24 f303 	lsr.w	r3, r4, r3
 8000482:	4091      	lsls	r1, r2
 8000484:	fb07 fc09 	mul.w	ip, r7, r9
 8000488:	430b      	orrs	r3, r1
 800048a:	0c19      	lsrs	r1, r3, #16
 800048c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000490:	458c      	cmp	ip, r1
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0x254>
 8000498:	1869      	adds	r1, r5, r1
 800049a:	f107 30ff 	add.w	r0, r7, #4294967295
 800049e:	d231      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004a0:	458c      	cmp	ip, r1
 80004a2:	d92f      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004a4:	3f02      	subs	r7, #2
 80004a6:	4429      	add	r1, r5
 80004a8:	eba1 010c 	sub.w	r1, r1, ip
 80004ac:	fbb1 f0f8 	udiv	r0, r1, r8
 80004b0:	fb08 1c10 	mls	ip, r8, r0, r1
 80004b4:	fb00 fe09 	mul.w	lr, r0, r9
 80004b8:	b299      	uxth	r1, r3
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	458e      	cmp	lr, r1
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x27e>
 80004c2:	1869      	adds	r1, r5, r1
 80004c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c8:	d218      	bcs.n	80004fc <__udivmoddi4+0x2a8>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d916      	bls.n	80004fc <__udivmoddi4+0x2a8>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4429      	add	r1, r5
 80004d2:	eba1 010e 	sub.w	r1, r1, lr
 80004d6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004da:	e73a      	b.n	8000352 <__udivmoddi4+0xfe>
 80004dc:	4637      	mov	r7, r6
 80004de:	4630      	mov	r0, r6
 80004e0:	e708      	b.n	80002f4 <__udivmoddi4+0xa0>
 80004e2:	460f      	mov	r7, r1
 80004e4:	e6e6      	b.n	80002b4 <__udivmoddi4+0x60>
 80004e6:	4618      	mov	r0, r3
 80004e8:	e6fb      	b.n	80002e2 <__udivmoddi4+0x8e>
 80004ea:	4543      	cmp	r3, r8
 80004ec:	d2ab      	bcs.n	8000446 <__udivmoddi4+0x1f2>
 80004ee:	ebb8 0102 	subs.w	r1, r8, r2
 80004f2:	eb69 020c 	sbc.w	r2, r9, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	4696      	mov	lr, r2
 80004fa:	e7a4      	b.n	8000446 <__udivmoddi4+0x1f2>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e7e8      	b.n	80004d2 <__udivmoddi4+0x27e>
 8000500:	4608      	mov	r0, r1
 8000502:	e795      	b.n	8000430 <__udivmoddi4+0x1dc>
 8000504:	4607      	mov	r7, r0
 8000506:	e7cf      	b.n	80004a8 <__udivmoddi4+0x254>
 8000508:	4681      	mov	r9, r0
 800050a:	e77b      	b.n	8000404 <__udivmoddi4+0x1b0>
 800050c:	3802      	subs	r0, #2
 800050e:	442c      	add	r4, r5
 8000510:	e747      	b.n	80003a2 <__udivmoddi4+0x14e>
 8000512:	f1ae 0e02 	sub.w	lr, lr, #2
 8000516:	442b      	add	r3, r5
 8000518:	e72f      	b.n	800037a <__udivmoddi4+0x126>
 800051a:	4638      	mov	r0, r7
 800051c:	e707      	b.n	800032e <__udivmoddi4+0xda>
 800051e:	4637      	mov	r7, r6
 8000520:	e6e8      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <servo_angle>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void servo_angle(int angle) {
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]

	angle = angle + 36;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	3324      	adds	r3, #36	; 0x24
 8000534:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, angle);
 8000536:	4b04      	ldr	r3, [pc, #16]	; (8000548 <servo_angle+0x20>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	200000d8 	.word	0x200000d8

0800054c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000552:	f000 fd07 	bl	8000f64 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000556:	f000 f8e7 	bl	8000728 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800055a:	f000 faab 	bl	8000ab4 <MX_GPIO_Init>
	MX_ADC1_Init();
 800055e:	f000 f947 	bl	80007f0 <MX_ADC1_Init>
	MX_TIM1_Init();
 8000562:	f000 f983 	bl	800086c <MX_TIM1_Init>
	MX_TIM2_Init();
 8000566:	f000 fa21 	bl	80009ac <MX_TIM2_Init>
	MX_USART1_UART_Init();
 800056a:	f000 fa79 	bl	8000a60 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800056e:	2100      	movs	r1, #0
 8000570:	4867      	ldr	r0, [pc, #412]	; (8000710 <main+0x1c4>)
 8000572:	f002 fd4b 	bl	800300c <HAL_TIM_PWM_Start>

	uint8_t number = 1;
 8000576:	2301      	movs	r3, #1
 8000578:	71fb      	strb	r3, [r7, #7]
		uint16_t analogRead;
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		HAL_ADC_Start(&hadc1);
 800057a:	4866      	ldr	r0, [pc, #408]	; (8000714 <main+0x1c8>)
 800057c:	f000 fe4e 	bl	800121c <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 8000580:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000584:	4863      	ldr	r0, [pc, #396]	; (8000714 <main+0x1c8>)
 8000586:	f000 fef7 	bl	8001378 <HAL_ADC_PollForConversion>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d104      	bne.n	800059a <main+0x4e>
			analogRead = HAL_ADC_GetValue(&hadc1);
 8000590:	4860      	ldr	r0, [pc, #384]	; (8000714 <main+0x1c8>)
 8000592:	f000 ffeb 	bl	800156c <HAL_ADC_GetValue>
 8000596:	4603      	mov	r3, r0
 8000598:	81fb      	strh	r3, [r7, #14]
			} if (analogRead > 4000) {
				analogRead == 4000;
			}
		}

		if (analogRead > 0 && analogRead < 500) {
 800059a:	89fb      	ldrh	r3, [r7, #14]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d017      	beq.n	80005d0 <main+0x84>
 80005a0:	89fb      	ldrh	r3, [r7, #14]
 80005a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005a6:	d213      	bcs.n	80005d0 <main+0x84>
			HAL_Delay(2000);
 80005a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005ac:	f000 fd3c 	bl	8001028 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2101      	movs	r1, #1
 80005b4:	4858      	ldr	r0, [pc, #352]	; (8000718 <main+0x1cc>)
 80005b6:	f001 fcd9 	bl	8001f6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2102      	movs	r1, #2
 80005be:	4856      	ldr	r0, [pc, #344]	; (8000718 <main+0x1cc>)
 80005c0:	f001 fcd4 	bl	8001f6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2104      	movs	r1, #4
 80005c8:	4853      	ldr	r0, [pc, #332]	; (8000718 <main+0x1cc>)
 80005ca:	f001 fccf 	bl	8001f6c <HAL_GPIO_WritePin>
 80005ce:	e09d      	b.n	800070c <main+0x1c0>
		} else if (analogRead > 500 && analogRead < 1002) {
 80005d0:	89fb      	ldrh	r3, [r7, #14]
 80005d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005d6:	d918      	bls.n	800060a <main+0xbe>
 80005d8:	89fb      	ldrh	r3, [r7, #14]
 80005da:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80005de:	4293      	cmp	r3, r2
 80005e0:	d813      	bhi.n	800060a <main+0xbe>
			HAL_Delay(2000);
 80005e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005e6:	f000 fd1f 	bl	8001028 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	2101      	movs	r1, #1
 80005ee:	484a      	ldr	r0, [pc, #296]	; (8000718 <main+0x1cc>)
 80005f0:	f001 fcbc 	bl	8001f6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2102      	movs	r1, #2
 80005f8:	4847      	ldr	r0, [pc, #284]	; (8000718 <main+0x1cc>)
 80005fa:	f001 fcb7 	bl	8001f6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2104      	movs	r1, #4
 8000602:	4845      	ldr	r0, [pc, #276]	; (8000718 <main+0x1cc>)
 8000604:	f001 fcb2 	bl	8001f6c <HAL_GPIO_WritePin>
 8000608:	e080      	b.n	800070c <main+0x1c0>
		} else if (analogRead > 1002 && analogRead < 1504) {
 800060a:	89fb      	ldrh	r3, [r7, #14]
 800060c:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8000610:	4293      	cmp	r3, r2
 8000612:	d917      	bls.n	8000644 <main+0xf8>
 8000614:	89fb      	ldrh	r3, [r7, #14]
 8000616:	f5b3 6fbc 	cmp.w	r3, #1504	; 0x5e0
 800061a:	d213      	bcs.n	8000644 <main+0xf8>
			HAL_Delay(2000);
 800061c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000620:	f000 fd02 	bl	8001028 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	2101      	movs	r1, #1
 8000628:	483b      	ldr	r0, [pc, #236]	; (8000718 <main+0x1cc>)
 800062a:	f001 fc9f 	bl	8001f6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	2102      	movs	r1, #2
 8000632:	4839      	ldr	r0, [pc, #228]	; (8000718 <main+0x1cc>)
 8000634:	f001 fc9a 	bl	8001f6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2104      	movs	r1, #4
 800063c:	4836      	ldr	r0, [pc, #216]	; (8000718 <main+0x1cc>)
 800063e:	f001 fc95 	bl	8001f6c <HAL_GPIO_WritePin>
 8000642:	e063      	b.n	800070c <main+0x1c0>
		} else if (analogRead > 1504 && analogRead < 2008) {
 8000644:	89fb      	ldrh	r3, [r7, #14]
 8000646:	f5b3 6fbc 	cmp.w	r3, #1504	; 0x5e0
 800064a:	d913      	bls.n	8000674 <main+0x128>
 800064c:	89fb      	ldrh	r3, [r7, #14]
 800064e:	f5b3 6ffb 	cmp.w	r3, #2008	; 0x7d8
 8000652:	d20f      	bcs.n	8000674 <main+0x128>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	2101      	movs	r1, #1
 8000658:	482f      	ldr	r0, [pc, #188]	; (8000718 <main+0x1cc>)
 800065a:	f001 fc87 	bl	8001f6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	2102      	movs	r1, #2
 8000662:	482d      	ldr	r0, [pc, #180]	; (8000718 <main+0x1cc>)
 8000664:	f001 fc82 	bl	8001f6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	2104      	movs	r1, #4
 800066c:	482a      	ldr	r0, [pc, #168]	; (8000718 <main+0x1cc>)
 800066e:	f001 fc7d 	bl	8001f6c <HAL_GPIO_WritePin>
 8000672:	e04b      	b.n	800070c <main+0x1c0>
		} else if (analogRead > 2008 && analogRead < 4010) {
 8000674:	89fb      	ldrh	r3, [r7, #14]
 8000676:	f5b3 6ffb 	cmp.w	r3, #2008	; 0x7d8
 800067a:	f67f af7e 	bls.w	800057a <main+0x2e>
 800067e:	89fb      	ldrh	r3, [r7, #14]
 8000680:	f640 72a9 	movw	r2, #4009	; 0xfa9
 8000684:	4293      	cmp	r3, r2
 8000686:	f63f af78 	bhi.w	800057a <main+0x2e>

			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800068a:	210c      	movs	r1, #12
 800068c:	4823      	ldr	r0, [pc, #140]	; (800071c <main+0x1d0>)
 800068e:	f002 fcbd 	bl	800300c <HAL_TIM_PWM_Start>
			HAL_Delay((4000-analogRead)/100 + 2);
 8000692:	89fb      	ldrh	r3, [r7, #14]
 8000694:	f5c3 637a 	rsb	r3, r3, #4000	; 0xfa0
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <main+0x1d4>)
 800069a:	fb82 1203 	smull	r1, r2, r2, r3
 800069e:	1152      	asrs	r2, r2, #5
 80006a0:	17db      	asrs	r3, r3, #31
 80006a2:	1ad3      	subs	r3, r2, r3
 80006a4:	3302      	adds	r3, #2
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 fcbe 	bl	8001028 <HAL_Delay>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 80006ac:	210c      	movs	r1, #12
 80006ae:	481b      	ldr	r0, [pc, #108]	; (800071c <main+0x1d0>)
 80006b0:	f002 fcde 	bl	8003070 <HAL_TIM_PWM_Stop>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_0);
 80006b4:	2101      	movs	r1, #1
 80006b6:	4818      	ldr	r0, [pc, #96]	; (8000718 <main+0x1cc>)
 80006b8:	f001 fc70 	bl	8001f9c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_1);
 80006bc:	2102      	movs	r1, #2
 80006be:	4816      	ldr	r0, [pc, #88]	; (8000718 <main+0x1cc>)
 80006c0:	f001 fc6c 	bl	8001f9c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80006c4:	2104      	movs	r1, #4
 80006c6:	4814      	ldr	r0, [pc, #80]	; (8000718 <main+0x1cc>)
 80006c8:	f001 fc68 	bl	8001f9c <HAL_GPIO_TogglePin>
			for (int i=0; i<=180; i++) {
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	e012      	b.n	80006f8 <main+0x1ac>
				servo_angle(i);
 80006d2:	68b8      	ldr	r0, [r7, #8]
 80006d4:	f7ff ff28 	bl	8000528 <servo_angle>
				HAL_Delay((4000-analogRead)/100 + 2);
 80006d8:	89fb      	ldrh	r3, [r7, #14]
 80006da:	f5c3 637a 	rsb	r3, r3, #4000	; 0xfa0
 80006de:	4a10      	ldr	r2, [pc, #64]	; (8000720 <main+0x1d4>)
 80006e0:	fb82 1203 	smull	r1, r2, r2, r3
 80006e4:	1152      	asrs	r2, r2, #5
 80006e6:	17db      	asrs	r3, r3, #31
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	3302      	adds	r3, #2
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 fc9b 	bl	8001028 <HAL_Delay>
			for (int i=0; i<=180; i++) {
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	3301      	adds	r3, #1
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	2bb4      	cmp	r3, #180	; 0xb4
 80006fc:	dde9      	ble.n	80006d2 <main+0x186>
			}
			HAL_UART_Transmit(&huart1, &number, sizeof(number), HAL_MAX_DELAY);
 80006fe:	1df9      	adds	r1, r7, #7
 8000700:	f04f 33ff 	mov.w	r3, #4294967295
 8000704:	2201      	movs	r2, #1
 8000706:	4807      	ldr	r0, [pc, #28]	; (8000724 <main+0x1d8>)
 8000708:	f003 fa0c 	bl	8003b24 <HAL_UART_Transmit>
	{
 800070c:	e735      	b.n	800057a <main+0x2e>
 800070e:	bf00      	nop
 8000710:	200000d8 	.word	0x200000d8
 8000714:	20000028 	.word	0x20000028
 8000718:	40011400 	.word	0x40011400
 800071c:	20000098 	.word	0x20000098
 8000720:	51eb851f 	.word	0x51eb851f
 8000724:	20000058 	.word	0x20000058

08000728 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b09c      	sub	sp, #112	; 0x70
 800072c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000732:	2238      	movs	r2, #56	; 0x38
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f003 fe0c 	bl	8004354 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2220      	movs	r2, #32
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f003 fdfe 	bl	8004354 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000758:	2301      	movs	r3, #1
 800075a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800075c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000760:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000766:	2301      	movs	r3, #1
 8000768:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 800076a:	2300      	movs	r3, #0
 800076c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076e:	2302      	movs	r3, #2
 8000770:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000772:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000776:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000778:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800077c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 800077e:	2300      	movs	r3, #0
 8000780:	667b      	str	r3, [r7, #100]	; 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000786:	4618      	mov	r0, r3
 8000788:	f001 fc20 	bl	8001fcc <HAL_RCC_OscConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x6e>
	{
		Error_Handler();
 8000792:	f000 f9e5 	bl	8000b60 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000796:	230f      	movs	r3, #15
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079a:	2302      	movs	r3, #2
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ae:	2101      	movs	r1, #1
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 ff21 	bl	80025f8 <HAL_RCC_ClockConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x98>
	{
		Error_Handler();
 80007bc:	f000 f9d0 	bl	8000b60 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007c0:	2302      	movs	r3, #2
 80007c2:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80007c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007c8:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	4618      	mov	r0, r3
 80007ce:	f002 f931 	bl	8002a34 <HAL_RCCEx_PeriphCLKConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0xb4>
	{
		Error_Handler();
 80007d8:	f000 f9c2 	bl	8000b60 <Error_Handler>
	}
	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 80007dc:	4b03      	ldr	r3, [pc, #12]	; (80007ec <SystemClock_Config+0xc4>)
 80007de:	2201      	movs	r2, #1
 80007e0:	601a      	str	r2, [r3, #0]
}
 80007e2:	bf00      	nop
 80007e4:	3770      	adds	r7, #112	; 0x70
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	42420070 	.word	0x42420070

080007f0 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_ADC1_Init+0x74>)
 8000802:	4a19      	ldr	r2, [pc, #100]	; (8000868 <MX_ADC1_Init+0x78>)
 8000804:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_ADC1_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_ADC1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_ADC1_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_ADC1_Init+0x74>)
 800081a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800081e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000820:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MX_ADC1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_ADC1_Init+0x74>)
 8000828:	2201      	movs	r2, #1
 800082a:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800082c:	480d      	ldr	r0, [pc, #52]	; (8000864 <MX_ADC1_Init+0x74>)
 800082e:	f000 fc1d 	bl	800106c <HAL_ADC_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_ADC1_Init+0x4c>
	{
		Error_Handler();
 8000838:	f000 f992 	bl	8000b60 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 800083c:	230a      	movs	r3, #10
 800083e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000840:	2301      	movs	r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	4619      	mov	r1, r3
 800084c:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_ADC1_Init+0x74>)
 800084e:	f000 fe99 	bl	8001584 <HAL_ADC_ConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_ADC1_Init+0x6c>
	{
		Error_Handler();
 8000858:	f000 f982 	bl	8000b60 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000028 	.word	0x20000028
 8000868:	40012400 	.word	0x40012400

0800086c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b096      	sub	sp, #88	; 0x58
 8000870:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000872:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000880:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]
 800089a:	615a      	str	r2, [r3, #20]
 800089c:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2220      	movs	r2, #32
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f003 fd55 	bl	8004354 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80008aa:	4b3e      	ldr	r3, [pc, #248]	; (80009a4 <MX_TIM1_Init+0x138>)
 80008ac:	4a3e      	ldr	r2, [pc, #248]	; (80009a8 <MX_TIM1_Init+0x13c>)
 80008ae:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 32000;
 80008b0:	4b3c      	ldr	r3, [pc, #240]	; (80009a4 <MX_TIM1_Init+0x138>)
 80008b2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80008b6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b8:	4b3a      	ldr	r3, [pc, #232]	; (80009a4 <MX_TIM1_Init+0x138>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000;
 80008be:	4b39      	ldr	r3, [pc, #228]	; (80009a4 <MX_TIM1_Init+0x138>)
 80008c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008c4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c6:	4b37      	ldr	r3, [pc, #220]	; (80009a4 <MX_TIM1_Init+0x138>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80008cc:	4b35      	ldr	r3, [pc, #212]	; (80009a4 <MX_TIM1_Init+0x138>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d2:	4b34      	ldr	r3, [pc, #208]	; (80009a4 <MX_TIM1_Init+0x138>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008d8:	4832      	ldr	r0, [pc, #200]	; (80009a4 <MX_TIM1_Init+0x138>)
 80008da:	f002 fb41 	bl	8002f60 <HAL_TIM_Base_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 80008e4:	f000 f93c 	bl	8000b60 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ec:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008f2:	4619      	mov	r1, r3
 80008f4:	482b      	ldr	r0, [pc, #172]	; (80009a4 <MX_TIM1_Init+0x138>)
 80008f6:	f002 fccd 	bl	8003294 <HAL_TIM_ConfigClockSource>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 8000900:	f000 f92e 	bl	8000b60 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000904:	4827      	ldr	r0, [pc, #156]	; (80009a4 <MX_TIM1_Init+0x138>)
 8000906:	f002 fb56 	bl	8002fb6 <HAL_TIM_PWM_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 8000910:	f000 f926 	bl	8000b60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000914:	2300      	movs	r3, #0
 8000916:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800091c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000920:	4619      	mov	r1, r3
 8000922:	4820      	ldr	r0, [pc, #128]	; (80009a4 <MX_TIM1_Init+0x138>)
 8000924:	f003 f81c 	bl	8003960 <HAL_TIMEx_MasterConfigSynchronization>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM1_Init+0xc6>
	{
		Error_Handler();
 800092e:	f000 f917 	bl	8000b60 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000932:	2360      	movs	r3, #96	; 0x60
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 500;
 8000936:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800093c:	2300      	movs	r3, #0
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000944:	2300      	movs	r3, #0
 8000946:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000948:	2300      	movs	r3, #0
 800094a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800094c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000950:	220c      	movs	r2, #12
 8000952:	4619      	mov	r1, r3
 8000954:	4813      	ldr	r0, [pc, #76]	; (80009a4 <MX_TIM1_Init+0x138>)
 8000956:	f002 fbd7 	bl	8003108 <HAL_TIM_PWM_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM1_Init+0xf8>
	{
		Error_Handler();
 8000960:	f000 f8fe 	bl	8000b60 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800097c:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	4619      	mov	r1, r3
 8000986:	4807      	ldr	r0, [pc, #28]	; (80009a4 <MX_TIM1_Init+0x138>)
 8000988:	f003 f82e 	bl	80039e8 <HAL_TIMEx_ConfigBreakDeadTime>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM1_Init+0x12a>
	{
		Error_Handler();
 8000992:	f000 f8e5 	bl	8000b60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000996:	4803      	ldr	r0, [pc, #12]	; (80009a4 <MX_TIM1_Init+0x138>)
 8000998:	f000 f990 	bl	8000cbc <HAL_TIM_MspPostInit>

}
 800099c:	bf00      	nop
 800099e:	3758      	adds	r7, #88	; 0x58
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000098 	.word	0x20000098
 80009a8:	40012c00 	.word	0x40012c00

080009ac <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b2:	f107 0320 	add.w	r3, r7, #32
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]
 80009ca:	615a      	str	r2, [r3, #20]
 80009cc:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80009ce:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <MX_TIM2_Init+0xb0>)
 80009d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009d4:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 355;
 80009d6:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <MX_TIM2_Init+0xb0>)
 80009d8:	f240 1263 	movw	r2, #355	; 0x163
 80009dc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009de:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <MX_TIM2_Init+0xb0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1799;
 80009e4:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <MX_TIM2_Init+0xb0>)
 80009e6:	f240 7207 	movw	r2, #1799	; 0x707
 80009ea:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <MX_TIM2_Init+0xb0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f2:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <MX_TIM2_Init+0xb0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009f8:	4818      	ldr	r0, [pc, #96]	; (8000a5c <MX_TIM2_Init+0xb0>)
 80009fa:	f002 fadc 	bl	8002fb6 <HAL_TIM_PWM_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM2_Init+0x5c>
	{
		Error_Handler();
 8000a04:	f000 f8ac 	bl	8000b60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a10:	f107 0320 	add.w	r3, r7, #32
 8000a14:	4619      	mov	r1, r3
 8000a16:	4811      	ldr	r0, [pc, #68]	; (8000a5c <MX_TIM2_Init+0xb0>)
 8000a18:	f002 ffa2 	bl	8003960 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM2_Init+0x7a>
	{
		Error_Handler();
 8000a22:	f000 f89d 	bl	8000b60 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a26:	2360      	movs	r3, #96	; 0x60
 8000a28:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4807      	ldr	r0, [pc, #28]	; (8000a5c <MX_TIM2_Init+0xb0>)
 8000a3e:	f002 fb63 	bl	8003108 <HAL_TIM_PWM_ConfigChannel>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM2_Init+0xa0>
	{
		Error_Handler();
 8000a48:	f000 f88a 	bl	8000b60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000a4c:	4803      	ldr	r0, [pc, #12]	; (8000a5c <MX_TIM2_Init+0xb0>)
 8000a4e:	f000 f935 	bl	8000cbc <HAL_TIM_MspPostInit>

}
 8000a52:	bf00      	nop
 8000a54:	3728      	adds	r7, #40	; 0x28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200000d8 	.word	0x200000d8

08000a60 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a66:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <MX_USART1_UART_Init+0x50>)
 8000a68:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a70:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a98:	f002 fff7 	bl	8003a8a <HAL_UART_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8000aa2:	f000 f85d 	bl	8000b60 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000058 	.word	0x20000058
 8000ab0:	40013800 	.word	0x40013800

08000ab4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aba:	f107 0310 	add.w	r3, r7, #16
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac8:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <MX_GPIO_Init+0xa4>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a22      	ldr	r2, [pc, #136]	; (8000b58 <MX_GPIO_Init+0xa4>)
 8000ace:	f043 0310 	orr.w	r3, r3, #16
 8000ad2:	6193      	str	r3, [r2, #24]
 8000ad4:	4b20      	ldr	r3, [pc, #128]	; (8000b58 <MX_GPIO_Init+0xa4>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f003 0310 	and.w	r3, r3, #16
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <MX_GPIO_Init+0xa4>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a1c      	ldr	r2, [pc, #112]	; (8000b58 <MX_GPIO_Init+0xa4>)
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <MX_GPIO_Init+0xa4>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <MX_GPIO_Init+0xa4>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a16      	ldr	r2, [pc, #88]	; (8000b58 <MX_GPIO_Init+0xa4>)
 8000afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_GPIO_Init+0xa4>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_GPIO_Init+0xa4>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <MX_GPIO_Init+0xa4>)
 8000b16:	f043 0320 	orr.w	r3, r3, #32
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_GPIO_Init+0xa4>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f003 0320 	and.w	r3, r3, #32
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2107      	movs	r1, #7
 8000b2c:	480b      	ldr	r0, [pc, #44]	; (8000b5c <MX_GPIO_Init+0xa8>)
 8000b2e:	f001 fa1d 	bl	8001f6c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PD0 PD1 PD2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000b32:	2307      	movs	r3, #7
 8000b34:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b42:	f107 0310 	add.w	r3, r7, #16
 8000b46:	4619      	mov	r1, r3
 8000b48:	4804      	ldr	r0, [pc, #16]	; (8000b5c <MX_GPIO_Init+0xa8>)
 8000b4a:	f001 f8b5 	bl	8001cb8 <HAL_GPIO_Init>

}
 8000b4e:	bf00      	nop
 8000b50:	3720      	adds	r7, #32
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	40011400 	.word	0x40011400

08000b60 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr

08000b6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_MspInit+0x5c>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	4a14      	ldr	r2, [pc, #80]	; (8000bc8 <HAL_MspInit+0x5c>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6193      	str	r3, [r2, #24]
 8000b7e:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <HAL_MspInit+0x5c>)
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <HAL_MspInit+0x5c>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	4a0e      	ldr	r2, [pc, #56]	; (8000bc8 <HAL_MspInit+0x5c>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b94:	61d3      	str	r3, [r2, #28]
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <HAL_MspInit+0x5c>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <HAL_MspInit+0x60>)
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <HAL_MspInit+0x60>)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40010000 	.word	0x40010000

08000bd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a14      	ldr	r2, [pc, #80]	; (8000c3c <HAL_ADC_MspInit+0x6c>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d121      	bne.n	8000c34 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <HAL_ADC_MspInit+0x70>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <HAL_ADC_MspInit+0x70>)
 8000bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <HAL_ADC_MspInit+0x70>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c08:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <HAL_ADC_MspInit+0x70>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a0c      	ldr	r2, [pc, #48]	; (8000c40 <HAL_ADC_MspInit+0x70>)
 8000c0e:	f043 0310 	orr.w	r3, r3, #16
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <HAL_ADC_MspInit+0x70>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0310 	and.w	r3, r3, #16
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c20:	2301      	movs	r3, #1
 8000c22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c24:	2303      	movs	r3, #3
 8000c26:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <HAL_ADC_MspInit+0x74>)
 8000c30:	f001 f842 	bl	8001cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c34:	bf00      	nop
 8000c36:	3720      	adds	r7, #32
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40012400 	.word	0x40012400
 8000c40:	40021000 	.word	0x40021000
 8000c44:	40011000 	.word	0x40011000

08000c48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a09      	ldr	r2, [pc, #36]	; (8000c7c <HAL_TIM_Base_MspInit+0x34>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d10b      	bne.n	8000c72 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <HAL_TIM_Base_MspInit+0x38>)
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <HAL_TIM_Base_MspInit+0x38>)
 8000c60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c64:	6193      	str	r3, [r2, #24]
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_TIM_Base_MspInit+0x38>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c72:	bf00      	nop
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr
 8000c7c:	40012c00 	.word	0x40012c00
 8000c80:	40021000 	.word	0x40021000

08000c84 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c94:	d10b      	bne.n	8000cae <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_TIM_PWM_MspInit+0x34>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <HAL_TIM_PWM_MspInit+0x34>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	61d3      	str	r3, [r2, #28]
 8000ca2:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <HAL_TIM_PWM_MspInit+0x34>)
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cae:	bf00      	nop
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	40021000 	.word	0x40021000

08000cbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a28      	ldr	r2, [pc, #160]	; (8000d78 <HAL_TIM_MspPostInit+0xbc>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d12b      	bne.n	8000d34 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cdc:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <HAL_TIM_MspPostInit+0xc0>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a26      	ldr	r2, [pc, #152]	; (8000d7c <HAL_TIM_MspPostInit+0xc0>)
 8000ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b24      	ldr	r3, [pc, #144]	; (8000d7c <HAL_TIM_MspPostInit+0xc0>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PE14     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000cf4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	481d      	ldr	r0, [pc, #116]	; (8000d80 <HAL_TIM_MspPostInit+0xc4>)
 8000d0a:	f000 ffd5 	bl	8001cb8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <HAL_TIM_MspPostInit+0xc8>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
 8000d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d16:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
 8000d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d2c:	4a15      	ldr	r2, [pc, #84]	; (8000d84 <HAL_TIM_MspPostInit+0xc8>)
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d32:	e01c      	b.n	8000d6e <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM2)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d3c:	d117      	bne.n	8000d6e <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <HAL_TIM_MspPostInit+0xc0>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <HAL_TIM_MspPostInit+0xc0>)
 8000d44:	f043 0304 	orr.w	r3, r3, #4
 8000d48:	6193      	str	r3, [r2, #24]
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <HAL_TIM_MspPostInit+0xc0>)
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	f003 0304 	and.w	r3, r3, #4
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d56:	2301      	movs	r3, #1
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	4807      	ldr	r0, [pc, #28]	; (8000d88 <HAL_TIM_MspPostInit+0xcc>)
 8000d6a:	f000 ffa5 	bl	8001cb8 <HAL_GPIO_Init>
}
 8000d6e:	bf00      	nop
 8000d70:	3728      	adds	r7, #40	; 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40012c00 	.word	0x40012c00
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40011800 	.word	0x40011800
 8000d84:	40010000 	.word	0x40010000
 8000d88:	40010800 	.word	0x40010800

08000d8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a20      	ldr	r2, [pc, #128]	; (8000e28 <HAL_UART_MspInit+0x9c>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d139      	bne.n	8000e20 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dac:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <HAL_UART_MspInit+0xa0>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a1e      	ldr	r2, [pc, #120]	; (8000e2c <HAL_UART_MspInit+0xa0>)
 8000db2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <HAL_UART_MspInit+0xa0>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc4:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <HAL_UART_MspInit+0xa0>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a18      	ldr	r2, [pc, #96]	; (8000e2c <HAL_UART_MspInit+0xa0>)
 8000dca:	f043 0304 	orr.w	r3, r3, #4
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <HAL_UART_MspInit+0xa0>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f003 0304 	and.w	r3, r3, #4
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ddc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de6:	2303      	movs	r3, #3
 8000de8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dea:	f107 0310 	add.w	r3, r7, #16
 8000dee:	4619      	mov	r1, r3
 8000df0:	480f      	ldr	r0, [pc, #60]	; (8000e30 <HAL_UART_MspInit+0xa4>)
 8000df2:	f000 ff61 	bl	8001cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000df6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4809      	ldr	r0, [pc, #36]	; (8000e30 <HAL_UART_MspInit+0xa4>)
 8000e0c:	f000 ff54 	bl	8001cb8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2100      	movs	r1, #0
 8000e14:	2025      	movs	r0, #37	; 0x25
 8000e16:	f000 fe10 	bl	8001a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e1a:	2025      	movs	r0, #37	; 0x25
 8000e1c:	f000 fe29 	bl	8001a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e20:	bf00      	nop
 8000e22:	3720      	adds	r7, #32
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40013800 	.word	0x40013800
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40010800 	.word	0x40010800

08000e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr

08000e40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <HardFault_Handler+0x4>

08000e46 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <MemManage_Handler+0x4>

08000e4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <BusFault_Handler+0x4>

08000e52 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <UsageFault_Handler+0x4>

08000e58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr

08000e70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr

08000e7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e80:	f000 f8b6 	bl	8000ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e8c:	4802      	ldr	r0, [pc, #8]	; (8000e98 <USART1_IRQHandler+0x10>)
 8000e8e:	f002 fee3 	bl	8003c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000058 	.word	0x20000058

08000e9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000ea0:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <SystemInit+0x70>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a19      	ldr	r2, [pc, #100]	; (8000f0c <SystemInit+0x70>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 8000eac:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <SystemInit+0x70>)
 8000eae:	685a      	ldr	r2, [r3, #4]
 8000eb0:	4916      	ldr	r1, [pc, #88]	; (8000f0c <SystemInit+0x70>)
 8000eb2:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <SystemInit+0x74>)
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	604b      	str	r3, [r1, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <SystemInit+0x70>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a13      	ldr	r2, [pc, #76]	; (8000f0c <SystemInit+0x70>)
 8000ebe:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ec6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ec8:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <SystemInit+0x70>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <SystemInit+0x70>)
 8000ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <SystemInit+0x70>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	4a0c      	ldr	r2, [pc, #48]	; (8000f0c <SystemInit+0x70>)
 8000eda:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000ede:	6053      	str	r3, [r2, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <SystemInit+0x70>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a09      	ldr	r2, [pc, #36]	; (8000f0c <SystemInit+0x70>)
 8000ee6:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8000eea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <SystemInit+0x70>)
 8000eee:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8000ef2:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <SystemInit+0x70>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <SystemInit+0x78>)
 8000efc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f00:	609a      	str	r2, [r3, #8]
#endif 
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	f0ff0000 	.word	0xf0ff0000
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f18:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f1a:	e003      	b.n	8000f24 <LoopCopyDataInit>

08000f1c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000f1e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f20:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f22:	3104      	adds	r1, #4

08000f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f24:	480a      	ldr	r0, [pc, #40]	; (8000f50 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f28:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f2a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f2c:	d3f6      	bcc.n	8000f1c <CopyDataInit>
  ldr r2, =_sbss
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000f30:	e002      	b.n	8000f38 <LoopFillZerobss>

08000f32 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f34:	f842 3b04 	str.w	r3, [r2], #4

08000f38 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000f3a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f3c:	d3f9      	bcc.n	8000f32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f3e:	f7ff ffad 	bl	8000e9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f42:	f003 f9e3 	bl	800430c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f46:	f7ff fb01 	bl	800054c <main>
  bx lr
 8000f4a:	4770      	bx	lr
  ldr r3, =_sidata
 8000f4c:	080043e4 	.word	0x080043e4
  ldr r0, =_sdata
 8000f50:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f54:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000f58:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000f5c:	2000011c 	.word	0x2000011c

08000f60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f60:	e7fe      	b.n	8000f60 <ADC1_2_IRQHandler>
	...

08000f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <HAL_Init+0x28>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <HAL_Init+0x28>)
 8000f6e:	f043 0310 	orr.w	r3, r3, #16
 8000f72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f74:	2003      	movs	r0, #3
 8000f76:	f000 fd55 	bl	8001a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f000 f808 	bl	8000f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f80:	f7ff fdf4 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40022000 	.word	0x40022000

08000f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_InitTick+0x54>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_InitTick+0x58>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 fd6d 	bl	8001a8e <HAL_SYSTICK_Config>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00e      	b.n	8000fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b0f      	cmp	r3, #15
 8000fc2:	d80a      	bhi.n	8000fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f000 fd35 	bl	8001a3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd0:	4a06      	ldr	r2, [pc, #24]	; (8000fec <HAL_InitTick+0x5c>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e000      	b.n	8000fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	20000004 	.word	0x20000004

08000ff0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <HAL_IncTick+0x1c>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b05      	ldr	r3, [pc, #20]	; (8001010 <HAL_IncTick+0x20>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	4a03      	ldr	r2, [pc, #12]	; (8001010 <HAL_IncTick+0x20>)
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	20000008 	.word	0x20000008
 8001010:	20000118 	.word	0x20000118

08001014 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b02      	ldr	r3, [pc, #8]	; (8001024 <HAL_GetTick+0x10>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	20000118 	.word	0x20000118

08001028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff fff0 	bl	8001014 <HAL_GetTick>
 8001034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001040:	d005      	beq.n	800104e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_Delay+0x40>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800104e:	bf00      	nop
 8001050:	f7ff ffe0 	bl	8001014 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	429a      	cmp	r2, r3
 800105e:	d8f7      	bhi.n	8001050 <HAL_Delay+0x28>
  {
  }
}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000008 	.word	0x20000008

0800106c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001074:	2300      	movs	r3, #0
 8001076:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e0be      	b.n	800120c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001098:	2b00      	cmp	r3, #0
 800109a:	d109      	bne.n	80010b0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff fd90 	bl	8000bd0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 fbb1 	bl	8001818 <ADC_ConversionStop_Disable>
 80010b6:	4603      	mov	r3, r0
 80010b8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010be:	f003 0310 	and.w	r3, r3, #16
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f040 8099 	bne.w	80011fa <HAL_ADC_Init+0x18e>
 80010c8:	7dfb      	ldrb	r3, [r7, #23]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f040 8095 	bne.w	80011fa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010d8:	f023 0302 	bic.w	r3, r3, #2
 80010dc:	f043 0202 	orr.w	r2, r3, #2
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010ec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	7b1b      	ldrb	r3, [r3, #12]
 80010f2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010f4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001104:	d003      	beq.n	800110e <HAL_ADC_Init+0xa2>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d102      	bne.n	8001114 <HAL_ADC_Init+0xa8>
 800110e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001112:	e000      	b.n	8001116 <HAL_ADC_Init+0xaa>
 8001114:	2300      	movs	r3, #0
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	7d1b      	ldrb	r3, [r3, #20]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d119      	bne.n	8001158 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	7b1b      	ldrb	r3, [r3, #12]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d109      	bne.n	8001140 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	3b01      	subs	r3, #1
 8001132:	035a      	lsls	r2, r3, #13
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	e00b      	b.n	8001158 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001144:	f043 0220 	orr.w	r2, r3, #32
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001150:	f043 0201 	orr.w	r2, r3, #1
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	430a      	orrs	r2, r1
 800116a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	4b28      	ldr	r3, [pc, #160]	; (8001214 <HAL_ADC_Init+0x1a8>)
 8001174:	4013      	ands	r3, r2
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	6812      	ldr	r2, [r2, #0]
 800117a:	68b9      	ldr	r1, [r7, #8]
 800117c:	430b      	orrs	r3, r1
 800117e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001188:	d003      	beq.n	8001192 <HAL_ADC_Init+0x126>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d104      	bne.n	800119c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	3b01      	subs	r3, #1
 8001198:	051b      	lsls	r3, r3, #20
 800119a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	430a      	orrs	r2, r1
 80011ae:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	4b18      	ldr	r3, [pc, #96]	; (8001218 <HAL_ADC_Init+0x1ac>)
 80011b8:	4013      	ands	r3, r2
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d10b      	bne.n	80011d8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ca:	f023 0303 	bic.w	r3, r3, #3
 80011ce:	f043 0201 	orr.w	r2, r3, #1
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011d6:	e018      	b.n	800120a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011dc:	f023 0312 	bic.w	r3, r3, #18
 80011e0:	f043 0210 	orr.w	r2, r3, #16
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ec:	f043 0201 	orr.w	r2, r3, #1
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011f8:	e007      	b.n	800120a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fe:	f043 0210 	orr.w	r2, r3, #16
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800120a:	7dfb      	ldrb	r3, [r7, #23]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	ffe1f7fd 	.word	0xffe1f7fd
 8001218:	ff1f0efe 	.word	0xff1f0efe

0800121c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001224:	2300      	movs	r3, #0
 8001226:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800122e:	2b01      	cmp	r3, #1
 8001230:	d101      	bne.n	8001236 <HAL_ADC_Start+0x1a>
 8001232:	2302      	movs	r3, #2
 8001234:	e098      	b.n	8001368 <HAL_ADC_Start+0x14c>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2201      	movs	r2, #1
 800123a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 fa98 	bl	8001774 <ADC_Enable>
 8001244:	4603      	mov	r3, r0
 8001246:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	2b00      	cmp	r3, #0
 800124c:	f040 8087 	bne.w	800135e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001258:	f023 0301 	bic.w	r3, r3, #1
 800125c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a41      	ldr	r2, [pc, #260]	; (8001370 <HAL_ADC_Start+0x154>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d105      	bne.n	800127a <HAL_ADC_Start+0x5e>
 800126e:	4b41      	ldr	r3, [pc, #260]	; (8001374 <HAL_ADC_Start+0x158>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d115      	bne.n	80012a6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001290:	2b00      	cmp	r3, #0
 8001292:	d026      	beq.n	80012e2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001298:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800129c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012a4:	e01d      	b.n	80012e2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a2f      	ldr	r2, [pc, #188]	; (8001374 <HAL_ADC_Start+0x158>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d004      	beq.n	80012c6 <HAL_ADC_Start+0xaa>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a2b      	ldr	r2, [pc, #172]	; (8001370 <HAL_ADC_Start+0x154>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d10d      	bne.n	80012e2 <HAL_ADC_Start+0xc6>
 80012c6:	4b2b      	ldr	r3, [pc, #172]	; (8001374 <HAL_ADC_Start+0x158>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d007      	beq.n	80012e2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d006      	beq.n	80012fc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f2:	f023 0206 	bic.w	r2, r3, #6
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80012fa:	e002      	b.n	8001302 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f06f 0202 	mvn.w	r2, #2
 8001312:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800131e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001322:	d113      	bne.n	800134c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001328:	4a11      	ldr	r2, [pc, #68]	; (8001370 <HAL_ADC_Start+0x154>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d105      	bne.n	800133a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <HAL_ADC_Start+0x158>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001336:	2b00      	cmp	r3, #0
 8001338:	d108      	bne.n	800134c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	e00c      	b.n	8001366 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	e003      	b.n	8001366 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001366:	7bfb      	ldrb	r3, [r7, #15]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40012800 	.word	0x40012800
 8001374:	40012400 	.word	0x40012400

08001378 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b087      	sub	sp, #28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800138e:	f7ff fe41 	bl	8001014 <HAL_GetTick>
 8001392:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00b      	beq.n	80013ba <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a6:	f043 0220 	orr.w	r2, r3, #32
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e0c8      	b.n	800154c <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d12a      	bne.n	800141e <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d123      	bne.n	800141e <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80013d6:	e01a      	b.n	800140e <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013de:	d016      	beq.n	800140e <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d007      	beq.n	80013f6 <HAL_ADC_PollForConversion+0x7e>
 80013e6:	f7ff fe15 	bl	8001014 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d20b      	bcs.n	800140e <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fa:	f043 0204 	orr.w	r2, r3, #4
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e09e      	b.n	800154c <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0dd      	beq.n	80013d8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800141c:	e06c      	b.n	80014f8 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800141e:	4b4d      	ldr	r3, [pc, #308]	; (8001554 <HAL_ADC_PollForConversion+0x1dc>)
 8001420:	681c      	ldr	r4, [r3, #0]
 8001422:	2002      	movs	r0, #2
 8001424:	f001 fc38 	bl	8002c98 <HAL_RCCEx_GetPeriphCLKFreq>
 8001428:	4603      	mov	r3, r0
 800142a:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6919      	ldr	r1, [r3, #16]
 8001434:	4b48      	ldr	r3, [pc, #288]	; (8001558 <HAL_ADC_PollForConversion+0x1e0>)
 8001436:	400b      	ands	r3, r1
 8001438:	2b00      	cmp	r3, #0
 800143a:	d118      	bne.n	800146e <HAL_ADC_PollForConversion+0xf6>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68d9      	ldr	r1, [r3, #12]
 8001442:	4b46      	ldr	r3, [pc, #280]	; (800155c <HAL_ADC_PollForConversion+0x1e4>)
 8001444:	400b      	ands	r3, r1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d111      	bne.n	800146e <HAL_ADC_PollForConversion+0xf6>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6919      	ldr	r1, [r3, #16]
 8001450:	4b43      	ldr	r3, [pc, #268]	; (8001560 <HAL_ADC_PollForConversion+0x1e8>)
 8001452:	400b      	ands	r3, r1
 8001454:	2b00      	cmp	r3, #0
 8001456:	d108      	bne.n	800146a <HAL_ADC_PollForConversion+0xf2>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68d9      	ldr	r1, [r3, #12]
 800145e:	4b41      	ldr	r3, [pc, #260]	; (8001564 <HAL_ADC_PollForConversion+0x1ec>)
 8001460:	400b      	ands	r3, r1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_ADC_PollForConversion+0xf2>
 8001466:	2314      	movs	r3, #20
 8001468:	e020      	b.n	80014ac <HAL_ADC_PollForConversion+0x134>
 800146a:	2329      	movs	r3, #41	; 0x29
 800146c:	e01e      	b.n	80014ac <HAL_ADC_PollForConversion+0x134>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6919      	ldr	r1, [r3, #16]
 8001474:	4b3a      	ldr	r3, [pc, #232]	; (8001560 <HAL_ADC_PollForConversion+0x1e8>)
 8001476:	400b      	ands	r3, r1
 8001478:	2b00      	cmp	r3, #0
 800147a:	d106      	bne.n	800148a <HAL_ADC_PollForConversion+0x112>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68d9      	ldr	r1, [r3, #12]
 8001482:	4b38      	ldr	r3, [pc, #224]	; (8001564 <HAL_ADC_PollForConversion+0x1ec>)
 8001484:	400b      	ands	r3, r1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00d      	beq.n	80014a6 <HAL_ADC_PollForConversion+0x12e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6919      	ldr	r1, [r3, #16]
 8001490:	4b35      	ldr	r3, [pc, #212]	; (8001568 <HAL_ADC_PollForConversion+0x1f0>)
 8001492:	400b      	ands	r3, r1
 8001494:	2b00      	cmp	r3, #0
 8001496:	d108      	bne.n	80014aa <HAL_ADC_PollForConversion+0x132>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68d9      	ldr	r1, [r3, #12]
 800149e:	4b32      	ldr	r3, [pc, #200]	; (8001568 <HAL_ADC_PollForConversion+0x1f0>)
 80014a0:	400b      	ands	r3, r1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_ADC_PollForConversion+0x132>
 80014a6:	2354      	movs	r3, #84	; 0x54
 80014a8:	e000      	b.n	80014ac <HAL_ADC_PollForConversion+0x134>
 80014aa:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80014ac:	fb02 f303 	mul.w	r3, r2, r3
 80014b0:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80014b2:	e01d      	b.n	80014f0 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ba:	d016      	beq.n	80014ea <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d007      	beq.n	80014d2 <HAL_ADC_PollForConversion+0x15a>
 80014c2:	f7ff fda7 	bl	8001014 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d20b      	bcs.n	80014ea <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d6:	f043 0204 	orr.w	r2, r3, #4
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e030      	b.n	800154c <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	3301      	adds	r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d8dd      	bhi.n	80014b4 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f06f 0212 	mvn.w	r2, #18
 8001500:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001506:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001518:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800151c:	d115      	bne.n	800154a <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001522:	2b00      	cmp	r3, #0
 8001524:	d111      	bne.n	800154a <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001536:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d105      	bne.n	800154a <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001542:	f043 0201 	orr.w	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	371c      	adds	r7, #28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd90      	pop	{r4, r7, pc}
 8001554:	20000000 	.word	0x20000000
 8001558:	24924924 	.word	0x24924924
 800155c:	00924924 	.word	0x00924924
 8001560:	12492492 	.word	0x12492492
 8001564:	00492492 	.word	0x00492492
 8001568:	00249249 	.word	0x00249249

0800156c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800157a:	4618      	mov	r0, r3
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr

08001584 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800159c:	2b01      	cmp	r3, #1
 800159e:	d101      	bne.n	80015a4 <HAL_ADC_ConfigChannel+0x20>
 80015a0:	2302      	movs	r3, #2
 80015a2:	e0dc      	b.n	800175e <HAL_ADC_ConfigChannel+0x1da>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b06      	cmp	r3, #6
 80015b2:	d81c      	bhi.n	80015ee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	3b05      	subs	r3, #5
 80015c6:	221f      	movs	r2, #31
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	4019      	ands	r1, r3
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	6818      	ldr	r0, [r3, #0]
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	4613      	mov	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	3b05      	subs	r3, #5
 80015e0:	fa00 f203 	lsl.w	r2, r0, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	635a      	str	r2, [r3, #52]	; 0x34
 80015ec:	e03c      	b.n	8001668 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b0c      	cmp	r3, #12
 80015f4:	d81c      	bhi.n	8001630 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	3b23      	subs	r3, #35	; 0x23
 8001608:	221f      	movs	r2, #31
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	4019      	ands	r1, r3
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	6818      	ldr	r0, [r3, #0]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	3b23      	subs	r3, #35	; 0x23
 8001622:	fa00 f203 	lsl.w	r2, r0, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	631a      	str	r2, [r3, #48]	; 0x30
 800162e:	e01b      	b.n	8001668 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	4613      	mov	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	3b41      	subs	r3, #65	; 0x41
 8001642:	221f      	movs	r2, #31
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	4019      	ands	r1, r3
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	3b41      	subs	r3, #65	; 0x41
 800165c:	fa00 f203 	lsl.w	r2, r0, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b09      	cmp	r3, #9
 800166e:	d91c      	bls.n	80016aa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68d9      	ldr	r1, [r3, #12]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	4613      	mov	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4413      	add	r3, r2
 8001680:	3b1e      	subs	r3, #30
 8001682:	2207      	movs	r2, #7
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	4019      	ands	r1, r3
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	6898      	ldr	r0, [r3, #8]
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4613      	mov	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4413      	add	r3, r2
 800169a:	3b1e      	subs	r3, #30
 800169c:	fa00 f203 	lsl.w	r2, r0, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	e019      	b.n	80016de <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6919      	ldr	r1, [r3, #16]
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4613      	mov	r3, r2
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	4413      	add	r3, r2
 80016ba:	2207      	movs	r2, #7
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	4019      	ands	r1, r3
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	6898      	ldr	r0, [r3, #8]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4613      	mov	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4413      	add	r3, r2
 80016d2:	fa00 f203 	lsl.w	r2, r0, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b10      	cmp	r3, #16
 80016e4:	d003      	beq.n	80016ee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016ea:	2b11      	cmp	r3, #17
 80016ec:	d132      	bne.n	8001754 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a1d      	ldr	r2, [pc, #116]	; (8001768 <HAL_ADC_ConfigChannel+0x1e4>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d125      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d126      	bne.n	8001754 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001714:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b10      	cmp	r3, #16
 800171c:	d11a      	bne.n	8001754 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800171e:	4b13      	ldr	r3, [pc, #76]	; (800176c <HAL_ADC_ConfigChannel+0x1e8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a13      	ldr	r2, [pc, #76]	; (8001770 <HAL_ADC_ConfigChannel+0x1ec>)
 8001724:	fba2 2303 	umull	r2, r3, r2, r3
 8001728:	0c9a      	lsrs	r2, r3, #18
 800172a:	4613      	mov	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001734:	e002      	b.n	800173c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	3b01      	subs	r3, #1
 800173a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f9      	bne.n	8001736 <HAL_ADC_ConfigChannel+0x1b2>
 8001742:	e007      	b.n	8001754 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001748:	f043 0220 	orr.w	r2, r3, #32
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800175c:	7bfb      	ldrb	r3, [r7, #15]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	40012400 	.word	0x40012400
 800176c:	20000000 	.word	0x20000000
 8001770:	431bde83 	.word	0x431bde83

08001774 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b01      	cmp	r3, #1
 8001790:	d039      	beq.n	8001806 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f042 0201 	orr.w	r2, r2, #1
 80017a0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017a2:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <ADC_Enable+0x9c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a1b      	ldr	r2, [pc, #108]	; (8001814 <ADC_Enable+0xa0>)
 80017a8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ac:	0c9b      	lsrs	r3, r3, #18
 80017ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017b0:	e002      	b.n	80017b8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f9      	bne.n	80017b2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017be:	f7ff fc29 	bl	8001014 <HAL_GetTick>
 80017c2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017c4:	e018      	b.n	80017f8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017c6:	f7ff fc25 	bl	8001014 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d911      	bls.n	80017f8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d8:	f043 0210 	orr.w	r2, r3, #16
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e4:	f043 0201 	orr.w	r2, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e007      	b.n	8001808 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b01      	cmp	r3, #1
 8001804:	d1df      	bne.n	80017c6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000000 	.word	0x20000000
 8001814:	431bde83 	.word	0x431bde83

08001818 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b01      	cmp	r3, #1
 8001830:	d127      	bne.n	8001882 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0201 	bic.w	r2, r2, #1
 8001840:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001842:	f7ff fbe7 	bl	8001014 <HAL_GetTick>
 8001846:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001848:	e014      	b.n	8001874 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800184a:	f7ff fbe3 	bl	8001014 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d90d      	bls.n	8001874 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185c:	f043 0210 	orr.w	r2, r3, #16
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	f043 0201 	orr.w	r2, r3, #1
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e007      	b.n	8001884 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b01      	cmp	r3, #1
 8001880:	d0e3      	beq.n	800184a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a8:	4013      	ands	r3, r2
 80018aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018be:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	60d3      	str	r3, [r2, #12]
}
 80018c4:	bf00      	nop
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <__NVIC_GetPriorityGrouping+0x18>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	0a1b      	lsrs	r3, r3, #8
 80018de:	f003 0307 	and.w	r3, r3, #7
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	db0b      	blt.n	800191a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	f003 021f 	and.w	r2, r3, #31
 8001908:	4906      	ldr	r1, [pc, #24]	; (8001924 <__NVIC_EnableIRQ+0x34>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	095b      	lsrs	r3, r3, #5
 8001910:	2001      	movs	r0, #1
 8001912:	fa00 f202 	lsl.w	r2, r0, r2
 8001916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	e000e100 	.word	0xe000e100

08001928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	6039      	str	r1, [r7, #0]
 8001932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001938:	2b00      	cmp	r3, #0
 800193a:	db0a      	blt.n	8001952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	b2da      	uxtb	r2, r3
 8001940:	490c      	ldr	r1, [pc, #48]	; (8001974 <__NVIC_SetPriority+0x4c>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	0112      	lsls	r2, r2, #4
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	440b      	add	r3, r1
 800194c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001950:	e00a      	b.n	8001968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4908      	ldr	r1, [pc, #32]	; (8001978 <__NVIC_SetPriority+0x50>)
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	3b04      	subs	r3, #4
 8001960:	0112      	lsls	r2, r2, #4
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	440b      	add	r3, r1
 8001966:	761a      	strb	r2, [r3, #24]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000e100 	.word	0xe000e100
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800197c:	b480      	push	{r7}
 800197e:	b089      	sub	sp, #36	; 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f1c3 0307 	rsb	r3, r3, #7
 8001996:	2b04      	cmp	r3, #4
 8001998:	bf28      	it	cs
 800199a:	2304      	movcs	r3, #4
 800199c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3304      	adds	r3, #4
 80019a2:	2b06      	cmp	r3, #6
 80019a4:	d902      	bls.n	80019ac <NVIC_EncodePriority+0x30>
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3b03      	subs	r3, #3
 80019aa:	e000      	b.n	80019ae <NVIC_EncodePriority+0x32>
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	f04f 32ff 	mov.w	r2, #4294967295
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43da      	mvns	r2, r3
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	401a      	ands	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c4:	f04f 31ff 	mov.w	r1, #4294967295
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	fa01 f303 	lsl.w	r3, r1, r3
 80019ce:	43d9      	mvns	r1, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d4:	4313      	orrs	r3, r2
         );
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3724      	adds	r7, #36	; 0x24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019f0:	d301      	bcc.n	80019f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019f2:	2301      	movs	r3, #1
 80019f4:	e00f      	b.n	8001a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f6:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <SysTick_Config+0x40>)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019fe:	210f      	movs	r1, #15
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295
 8001a04:	f7ff ff90 	bl	8001928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a08:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <SysTick_Config+0x40>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0e:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <SysTick_Config+0x40>)
 8001a10:	2207      	movs	r2, #7
 8001a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	e000e010 	.word	0xe000e010

08001a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff ff2d 	bl	800188c <__NVIC_SetPriorityGrouping>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
 8001a46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a4c:	f7ff ff42 	bl	80018d4 <__NVIC_GetPriorityGrouping>
 8001a50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	68b9      	ldr	r1, [r7, #8]
 8001a56:	6978      	ldr	r0, [r7, #20]
 8001a58:	f7ff ff90 	bl	800197c <NVIC_EncodePriority>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a62:	4611      	mov	r1, r2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff5f 	bl	8001928 <__NVIC_SetPriority>
}
 8001a6a:	bf00      	nop
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4603      	mov	r3, r0
 8001a7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff35 	bl	80018f0 <__NVIC_EnableIRQ>
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff ffa2 	bl	80019e0 <SysTick_Config>
 8001a9c:	4603      	mov	r3, r0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d005      	beq.n	8001aca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
 8001ac8:	e0d6      	b.n	8001c78 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 020e 	bic.w	r2, r2, #14
 8001ad8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0201 	bic.w	r2, r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	4b64      	ldr	r3, [pc, #400]	; (8001c84 <HAL_DMA_Abort_IT+0x1dc>)
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d958      	bls.n	8001ba8 <HAL_DMA_Abort_IT+0x100>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a63      	ldr	r2, [pc, #396]	; (8001c88 <HAL_DMA_Abort_IT+0x1e0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d04f      	beq.n	8001ba0 <HAL_DMA_Abort_IT+0xf8>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a61      	ldr	r2, [pc, #388]	; (8001c8c <HAL_DMA_Abort_IT+0x1e4>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d048      	beq.n	8001b9c <HAL_DMA_Abort_IT+0xf4>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a60      	ldr	r2, [pc, #384]	; (8001c90 <HAL_DMA_Abort_IT+0x1e8>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d040      	beq.n	8001b96 <HAL_DMA_Abort_IT+0xee>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a5e      	ldr	r2, [pc, #376]	; (8001c94 <HAL_DMA_Abort_IT+0x1ec>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d038      	beq.n	8001b90 <HAL_DMA_Abort_IT+0xe8>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a5d      	ldr	r2, [pc, #372]	; (8001c98 <HAL_DMA_Abort_IT+0x1f0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d030      	beq.n	8001b8a <HAL_DMA_Abort_IT+0xe2>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a5b      	ldr	r2, [pc, #364]	; (8001c9c <HAL_DMA_Abort_IT+0x1f4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d028      	beq.n	8001b84 <HAL_DMA_Abort_IT+0xdc>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a53      	ldr	r2, [pc, #332]	; (8001c84 <HAL_DMA_Abort_IT+0x1dc>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d020      	beq.n	8001b7e <HAL_DMA_Abort_IT+0xd6>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a57      	ldr	r2, [pc, #348]	; (8001ca0 <HAL_DMA_Abort_IT+0x1f8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d019      	beq.n	8001b7a <HAL_DMA_Abort_IT+0xd2>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a56      	ldr	r2, [pc, #344]	; (8001ca4 <HAL_DMA_Abort_IT+0x1fc>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d012      	beq.n	8001b76 <HAL_DMA_Abort_IT+0xce>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a54      	ldr	r2, [pc, #336]	; (8001ca8 <HAL_DMA_Abort_IT+0x200>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d00a      	beq.n	8001b70 <HAL_DMA_Abort_IT+0xc8>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a53      	ldr	r2, [pc, #332]	; (8001cac <HAL_DMA_Abort_IT+0x204>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d102      	bne.n	8001b6a <HAL_DMA_Abort_IT+0xc2>
 8001b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b68:	e01b      	b.n	8001ba2 <HAL_DMA_Abort_IT+0xfa>
 8001b6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b6e:	e018      	b.n	8001ba2 <HAL_DMA_Abort_IT+0xfa>
 8001b70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b74:	e015      	b.n	8001ba2 <HAL_DMA_Abort_IT+0xfa>
 8001b76:	2310      	movs	r3, #16
 8001b78:	e013      	b.n	8001ba2 <HAL_DMA_Abort_IT+0xfa>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e011      	b.n	8001ba2 <HAL_DMA_Abort_IT+0xfa>
 8001b7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b82:	e00e      	b.n	8001ba2 <HAL_DMA_Abort_IT+0xfa>
 8001b84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b88:	e00b      	b.n	8001ba2 <HAL_DMA_Abort_IT+0xfa>
 8001b8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b8e:	e008      	b.n	8001ba2 <HAL_DMA_Abort_IT+0xfa>
 8001b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b94:	e005      	b.n	8001ba2 <HAL_DMA_Abort_IT+0xfa>
 8001b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b9a:	e002      	b.n	8001ba2 <HAL_DMA_Abort_IT+0xfa>
 8001b9c:	2310      	movs	r3, #16
 8001b9e:	e000      	b.n	8001ba2 <HAL_DMA_Abort_IT+0xfa>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	4a43      	ldr	r2, [pc, #268]	; (8001cb0 <HAL_DMA_Abort_IT+0x208>)
 8001ba4:	6053      	str	r3, [r2, #4]
 8001ba6:	e057      	b.n	8001c58 <HAL_DMA_Abort_IT+0x1b0>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a36      	ldr	r2, [pc, #216]	; (8001c88 <HAL_DMA_Abort_IT+0x1e0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d04f      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x1aa>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a35      	ldr	r2, [pc, #212]	; (8001c8c <HAL_DMA_Abort_IT+0x1e4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d048      	beq.n	8001c4e <HAL_DMA_Abort_IT+0x1a6>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a33      	ldr	r2, [pc, #204]	; (8001c90 <HAL_DMA_Abort_IT+0x1e8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d040      	beq.n	8001c48 <HAL_DMA_Abort_IT+0x1a0>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a32      	ldr	r2, [pc, #200]	; (8001c94 <HAL_DMA_Abort_IT+0x1ec>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d038      	beq.n	8001c42 <HAL_DMA_Abort_IT+0x19a>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a30      	ldr	r2, [pc, #192]	; (8001c98 <HAL_DMA_Abort_IT+0x1f0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d030      	beq.n	8001c3c <HAL_DMA_Abort_IT+0x194>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a2f      	ldr	r2, [pc, #188]	; (8001c9c <HAL_DMA_Abort_IT+0x1f4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d028      	beq.n	8001c36 <HAL_DMA_Abort_IT+0x18e>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a26      	ldr	r2, [pc, #152]	; (8001c84 <HAL_DMA_Abort_IT+0x1dc>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d020      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x188>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a2b      	ldr	r2, [pc, #172]	; (8001ca0 <HAL_DMA_Abort_IT+0x1f8>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d019      	beq.n	8001c2c <HAL_DMA_Abort_IT+0x184>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a29      	ldr	r2, [pc, #164]	; (8001ca4 <HAL_DMA_Abort_IT+0x1fc>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d012      	beq.n	8001c28 <HAL_DMA_Abort_IT+0x180>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a28      	ldr	r2, [pc, #160]	; (8001ca8 <HAL_DMA_Abort_IT+0x200>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d00a      	beq.n	8001c22 <HAL_DMA_Abort_IT+0x17a>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a26      	ldr	r2, [pc, #152]	; (8001cac <HAL_DMA_Abort_IT+0x204>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d102      	bne.n	8001c1c <HAL_DMA_Abort_IT+0x174>
 8001c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1a:	e01b      	b.n	8001c54 <HAL_DMA_Abort_IT+0x1ac>
 8001c1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c20:	e018      	b.n	8001c54 <HAL_DMA_Abort_IT+0x1ac>
 8001c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c26:	e015      	b.n	8001c54 <HAL_DMA_Abort_IT+0x1ac>
 8001c28:	2310      	movs	r3, #16
 8001c2a:	e013      	b.n	8001c54 <HAL_DMA_Abort_IT+0x1ac>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e011      	b.n	8001c54 <HAL_DMA_Abort_IT+0x1ac>
 8001c30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c34:	e00e      	b.n	8001c54 <HAL_DMA_Abort_IT+0x1ac>
 8001c36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c3a:	e00b      	b.n	8001c54 <HAL_DMA_Abort_IT+0x1ac>
 8001c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c40:	e008      	b.n	8001c54 <HAL_DMA_Abort_IT+0x1ac>
 8001c42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c46:	e005      	b.n	8001c54 <HAL_DMA_Abort_IT+0x1ac>
 8001c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c4c:	e002      	b.n	8001c54 <HAL_DMA_Abort_IT+0x1ac>
 8001c4e:	2310      	movs	r3, #16
 8001c50:	e000      	b.n	8001c54 <HAL_DMA_Abort_IT+0x1ac>
 8001c52:	2301      	movs	r3, #1
 8001c54:	4a17      	ldr	r2, [pc, #92]	; (8001cb4 <HAL_DMA_Abort_IT+0x20c>)
 8001c56:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	4798      	blx	r3
    } 
  }
  return status;
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40020080 	.word	0x40020080
 8001c88:	40020008 	.word	0x40020008
 8001c8c:	4002001c 	.word	0x4002001c
 8001c90:	40020030 	.word	0x40020030
 8001c94:	40020044 	.word	0x40020044
 8001c98:	40020058 	.word	0x40020058
 8001c9c:	4002006c 	.word	0x4002006c
 8001ca0:	40020408 	.word	0x40020408
 8001ca4:	4002041c 	.word	0x4002041c
 8001ca8:	40020430 	.word	0x40020430
 8001cac:	40020444 	.word	0x40020444
 8001cb0:	40020400 	.word	0x40020400
 8001cb4:	40020000 	.word	0x40020000

08001cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b08b      	sub	sp, #44	; 0x2c
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cca:	e127      	b.n	8001f1c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ccc:	2201      	movs	r2, #1
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	69fa      	ldr	r2, [r7, #28]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	f040 8116 	bne.w	8001f16 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b12      	cmp	r3, #18
 8001cf0:	d034      	beq.n	8001d5c <HAL_GPIO_Init+0xa4>
 8001cf2:	2b12      	cmp	r3, #18
 8001cf4:	d80d      	bhi.n	8001d12 <HAL_GPIO_Init+0x5a>
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d02b      	beq.n	8001d52 <HAL_GPIO_Init+0x9a>
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d804      	bhi.n	8001d08 <HAL_GPIO_Init+0x50>
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d031      	beq.n	8001d66 <HAL_GPIO_Init+0xae>
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d01c      	beq.n	8001d40 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d06:	e048      	b.n	8001d9a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d08:	2b03      	cmp	r3, #3
 8001d0a:	d043      	beq.n	8001d94 <HAL_GPIO_Init+0xdc>
 8001d0c:	2b11      	cmp	r3, #17
 8001d0e:	d01b      	beq.n	8001d48 <HAL_GPIO_Init+0x90>
          break;
 8001d10:	e043      	b.n	8001d9a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d12:	4a89      	ldr	r2, [pc, #548]	; (8001f38 <HAL_GPIO_Init+0x280>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d026      	beq.n	8001d66 <HAL_GPIO_Init+0xae>
 8001d18:	4a87      	ldr	r2, [pc, #540]	; (8001f38 <HAL_GPIO_Init+0x280>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d806      	bhi.n	8001d2c <HAL_GPIO_Init+0x74>
 8001d1e:	4a87      	ldr	r2, [pc, #540]	; (8001f3c <HAL_GPIO_Init+0x284>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d020      	beq.n	8001d66 <HAL_GPIO_Init+0xae>
 8001d24:	4a86      	ldr	r2, [pc, #536]	; (8001f40 <HAL_GPIO_Init+0x288>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d01d      	beq.n	8001d66 <HAL_GPIO_Init+0xae>
          break;
 8001d2a:	e036      	b.n	8001d9a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d2c:	4a85      	ldr	r2, [pc, #532]	; (8001f44 <HAL_GPIO_Init+0x28c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d019      	beq.n	8001d66 <HAL_GPIO_Init+0xae>
 8001d32:	4a85      	ldr	r2, [pc, #532]	; (8001f48 <HAL_GPIO_Init+0x290>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d016      	beq.n	8001d66 <HAL_GPIO_Init+0xae>
 8001d38:	4a84      	ldr	r2, [pc, #528]	; (8001f4c <HAL_GPIO_Init+0x294>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d013      	beq.n	8001d66 <HAL_GPIO_Init+0xae>
          break;
 8001d3e:	e02c      	b.n	8001d9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	623b      	str	r3, [r7, #32]
          break;
 8001d46:	e028      	b.n	8001d9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	623b      	str	r3, [r7, #32]
          break;
 8001d50:	e023      	b.n	8001d9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	3308      	adds	r3, #8
 8001d58:	623b      	str	r3, [r7, #32]
          break;
 8001d5a:	e01e      	b.n	8001d9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	330c      	adds	r3, #12
 8001d62:	623b      	str	r3, [r7, #32]
          break;
 8001d64:	e019      	b.n	8001d9a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d102      	bne.n	8001d74 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d6e:	2304      	movs	r3, #4
 8001d70:	623b      	str	r3, [r7, #32]
          break;
 8001d72:	e012      	b.n	8001d9a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d105      	bne.n	8001d88 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d7c:	2308      	movs	r3, #8
 8001d7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69fa      	ldr	r2, [r7, #28]
 8001d84:	611a      	str	r2, [r3, #16]
          break;
 8001d86:	e008      	b.n	8001d9a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d88:	2308      	movs	r3, #8
 8001d8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69fa      	ldr	r2, [r7, #28]
 8001d90:	615a      	str	r2, [r3, #20]
          break;
 8001d92:	e002      	b.n	8001d9a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d94:	2300      	movs	r3, #0
 8001d96:	623b      	str	r3, [r7, #32]
          break;
 8001d98:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	2bff      	cmp	r3, #255	; 0xff
 8001d9e:	d801      	bhi.n	8001da4 <HAL_GPIO_Init+0xec>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	e001      	b.n	8001da8 <HAL_GPIO_Init+0xf0>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3304      	adds	r3, #4
 8001da8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	2bff      	cmp	r3, #255	; 0xff
 8001dae:	d802      	bhi.n	8001db6 <HAL_GPIO_Init+0xfe>
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	e002      	b.n	8001dbc <HAL_GPIO_Init+0x104>
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	3b08      	subs	r3, #8
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	210f      	movs	r1, #15
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	401a      	ands	r2, r3
 8001dce:	6a39      	ldr	r1, [r7, #32]
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 8096 	beq.w	8001f16 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dea:	4b59      	ldr	r3, [pc, #356]	; (8001f50 <HAL_GPIO_Init+0x298>)
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	4a58      	ldr	r2, [pc, #352]	; (8001f50 <HAL_GPIO_Init+0x298>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6193      	str	r3, [r2, #24]
 8001df6:	4b56      	ldr	r3, [pc, #344]	; (8001f50 <HAL_GPIO_Init+0x298>)
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e02:	4a54      	ldr	r2, [pc, #336]	; (8001f54 <HAL_GPIO_Init+0x29c>)
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	089b      	lsrs	r3, r3, #2
 8001e08:	3302      	adds	r3, #2
 8001e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	220f      	movs	r2, #15
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	4013      	ands	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a4b      	ldr	r2, [pc, #300]	; (8001f58 <HAL_GPIO_Init+0x2a0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d013      	beq.n	8001e56 <HAL_GPIO_Init+0x19e>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a4a      	ldr	r2, [pc, #296]	; (8001f5c <HAL_GPIO_Init+0x2a4>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d00d      	beq.n	8001e52 <HAL_GPIO_Init+0x19a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a49      	ldr	r2, [pc, #292]	; (8001f60 <HAL_GPIO_Init+0x2a8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d007      	beq.n	8001e4e <HAL_GPIO_Init+0x196>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a48      	ldr	r2, [pc, #288]	; (8001f64 <HAL_GPIO_Init+0x2ac>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d101      	bne.n	8001e4a <HAL_GPIO_Init+0x192>
 8001e46:	2303      	movs	r3, #3
 8001e48:	e006      	b.n	8001e58 <HAL_GPIO_Init+0x1a0>
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	e004      	b.n	8001e58 <HAL_GPIO_Init+0x1a0>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e002      	b.n	8001e58 <HAL_GPIO_Init+0x1a0>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <HAL_GPIO_Init+0x1a0>
 8001e56:	2300      	movs	r3, #0
 8001e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e5a:	f002 0203 	and.w	r2, r2, #3
 8001e5e:	0092      	lsls	r2, r2, #2
 8001e60:	4093      	lsls	r3, r2
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e68:	493a      	ldr	r1, [pc, #232]	; (8001f54 <HAL_GPIO_Init+0x29c>)
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	089b      	lsrs	r3, r3, #2
 8001e6e:	3302      	adds	r3, #2
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d006      	beq.n	8001e90 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e82:	4b39      	ldr	r3, [pc, #228]	; (8001f68 <HAL_GPIO_Init+0x2b0>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	4938      	ldr	r1, [pc, #224]	; (8001f68 <HAL_GPIO_Init+0x2b0>)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]
 8001e8e:	e006      	b.n	8001e9e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e90:	4b35      	ldr	r3, [pc, #212]	; (8001f68 <HAL_GPIO_Init+0x2b0>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	4933      	ldr	r1, [pc, #204]	; (8001f68 <HAL_GPIO_Init+0x2b0>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d006      	beq.n	8001eb8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001eaa:	4b2f      	ldr	r3, [pc, #188]	; (8001f68 <HAL_GPIO_Init+0x2b0>)
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	492e      	ldr	r1, [pc, #184]	; (8001f68 <HAL_GPIO_Init+0x2b0>)
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	604b      	str	r3, [r1, #4]
 8001eb6:	e006      	b.n	8001ec6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001eb8:	4b2b      	ldr	r3, [pc, #172]	; (8001f68 <HAL_GPIO_Init+0x2b0>)
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	4929      	ldr	r1, [pc, #164]	; (8001f68 <HAL_GPIO_Init+0x2b0>)
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d006      	beq.n	8001ee0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ed2:	4b25      	ldr	r3, [pc, #148]	; (8001f68 <HAL_GPIO_Init+0x2b0>)
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	4924      	ldr	r1, [pc, #144]	; (8001f68 <HAL_GPIO_Init+0x2b0>)
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	608b      	str	r3, [r1, #8]
 8001ede:	e006      	b.n	8001eee <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ee0:	4b21      	ldr	r3, [pc, #132]	; (8001f68 <HAL_GPIO_Init+0x2b0>)
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	491f      	ldr	r1, [pc, #124]	; (8001f68 <HAL_GPIO_Init+0x2b0>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d006      	beq.n	8001f08 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001efa:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <HAL_GPIO_Init+0x2b0>)
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	491a      	ldr	r1, [pc, #104]	; (8001f68 <HAL_GPIO_Init+0x2b0>)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	60cb      	str	r3, [r1, #12]
 8001f06:	e006      	b.n	8001f16 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f08:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <HAL_GPIO_Init+0x2b0>)
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	4915      	ldr	r1, [pc, #84]	; (8001f68 <HAL_GPIO_Init+0x2b0>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	3301      	adds	r3, #1
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	fa22 f303 	lsr.w	r3, r2, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f47f aed0 	bne.w	8001ccc <HAL_GPIO_Init+0x14>
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	372c      	adds	r7, #44	; 0x2c
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	10210000 	.word	0x10210000
 8001f3c:	10110000 	.word	0x10110000
 8001f40:	10120000 	.word	0x10120000
 8001f44:	10310000 	.word	0x10310000
 8001f48:	10320000 	.word	0x10320000
 8001f4c:	10220000 	.word	0x10220000
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40010000 	.word	0x40010000
 8001f58:	40010800 	.word	0x40010800
 8001f5c:	40010c00 	.word	0x40010c00
 8001f60:	40011000 	.word	0x40011000
 8001f64:	40011400 	.word	0x40011400
 8001f68:	40010400 	.word	0x40010400

08001f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	807b      	strh	r3, [r7, #2]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f7c:	787b      	ldrb	r3, [r7, #1]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f82:	887a      	ldrh	r2, [r7, #2]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f88:	e003      	b.n	8001f92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f8a:	887b      	ldrh	r3, [r7, #2]
 8001f8c:	041a      	lsls	r2, r3, #16
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	611a      	str	r2, [r3, #16]
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	887b      	ldrh	r3, [r7, #2]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fb4:	887a      	ldrh	r2, [r7, #2]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001fba:	e002      	b.n	8001fc2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fbc:	887a      	ldrh	r2, [r7, #2]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	611a      	str	r2, [r3, #16]
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e304      	b.n	80025e8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 8087 	beq.w	80020fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fec:	4b92      	ldr	r3, [pc, #584]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d00c      	beq.n	8002012 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ff8:	4b8f      	ldr	r3, [pc, #572]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 030c 	and.w	r3, r3, #12
 8002000:	2b08      	cmp	r3, #8
 8002002:	d112      	bne.n	800202a <HAL_RCC_OscConfig+0x5e>
 8002004:	4b8c      	ldr	r3, [pc, #560]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002010:	d10b      	bne.n	800202a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002012:	4b89      	ldr	r3, [pc, #548]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d06c      	beq.n	80020f8 <HAL_RCC_OscConfig+0x12c>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d168      	bne.n	80020f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e2de      	b.n	80025e8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002032:	d106      	bne.n	8002042 <HAL_RCC_OscConfig+0x76>
 8002034:	4b80      	ldr	r3, [pc, #512]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a7f      	ldr	r2, [pc, #508]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 800203a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	e02e      	b.n	80020a0 <HAL_RCC_OscConfig+0xd4>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0x98>
 800204a:	4b7b      	ldr	r3, [pc, #492]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a7a      	ldr	r2, [pc, #488]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	4b78      	ldr	r3, [pc, #480]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a77      	ldr	r2, [pc, #476]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 800205c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	e01d      	b.n	80020a0 <HAL_RCC_OscConfig+0xd4>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800206c:	d10c      	bne.n	8002088 <HAL_RCC_OscConfig+0xbc>
 800206e:	4b72      	ldr	r3, [pc, #456]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a71      	ldr	r2, [pc, #452]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	4b6f      	ldr	r3, [pc, #444]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a6e      	ldr	r2, [pc, #440]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	e00b      	b.n	80020a0 <HAL_RCC_OscConfig+0xd4>
 8002088:	4b6b      	ldr	r3, [pc, #428]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a6a      	ldr	r2, [pc, #424]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 800208e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	4b68      	ldr	r3, [pc, #416]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a67      	ldr	r2, [pc, #412]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 800209a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800209e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d013      	beq.n	80020d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7fe ffb4 	bl	8001014 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b0:	f7fe ffb0 	bl	8001014 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b64      	cmp	r3, #100	; 0x64
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e292      	b.n	80025e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c2:	4b5d      	ldr	r3, [pc, #372]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCC_OscConfig+0xe4>
 80020ce:	e014      	b.n	80020fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7fe ffa0 	bl	8001014 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d8:	f7fe ff9c 	bl	8001014 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b64      	cmp	r3, #100	; 0x64
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e27e      	b.n	80025e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ea:	4b53      	ldr	r3, [pc, #332]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x10c>
 80020f6:	e000      	b.n	80020fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d063      	beq.n	80021ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002106:	4b4c      	ldr	r3, [pc, #304]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00b      	beq.n	800212a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002112:	4b49      	ldr	r3, [pc, #292]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	2b08      	cmp	r3, #8
 800211c:	d11c      	bne.n	8002158 <HAL_RCC_OscConfig+0x18c>
 800211e:	4b46      	ldr	r3, [pc, #280]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d116      	bne.n	8002158 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212a:	4b43      	ldr	r3, [pc, #268]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d005      	beq.n	8002142 <HAL_RCC_OscConfig+0x176>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d001      	beq.n	8002142 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e252      	b.n	80025e8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002142:	4b3d      	ldr	r3, [pc, #244]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4939      	ldr	r1, [pc, #228]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002156:	e03a      	b.n	80021ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d020      	beq.n	80021a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002160:	4b36      	ldr	r3, [pc, #216]	; (800223c <HAL_RCC_OscConfig+0x270>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002166:	f7fe ff55 	bl	8001014 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800216e:	f7fe ff51 	bl	8001014 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e233      	b.n	80025e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002180:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218c:	4b2a      	ldr	r3, [pc, #168]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4927      	ldr	r1, [pc, #156]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 800219c:	4313      	orrs	r3, r2
 800219e:	600b      	str	r3, [r1, #0]
 80021a0:	e015      	b.n	80021ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a2:	4b26      	ldr	r3, [pc, #152]	; (800223c <HAL_RCC_OscConfig+0x270>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7fe ff34 	bl	8001014 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b0:	f7fe ff30 	bl	8001014 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e212      	b.n	80025e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c2:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d03a      	beq.n	8002250 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d019      	beq.n	8002216 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e2:	4b17      	ldr	r3, [pc, #92]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e8:	f7fe ff14 	bl	8001014 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f0:	f7fe ff10 	bl	8001014 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e1f2      	b.n	80025e8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002202:	4b0d      	ldr	r3, [pc, #52]	; (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800220e:	2001      	movs	r0, #1
 8002210:	f000 fbf2 	bl	80029f8 <RCC_Delay>
 8002214:	e01c      	b.n	8002250 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002216:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <HAL_RCC_OscConfig+0x274>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221c:	f7fe fefa 	bl	8001014 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002222:	e00f      	b.n	8002244 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002224:	f7fe fef6 	bl	8001014 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d908      	bls.n	8002244 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e1d8      	b.n	80025e8 <HAL_RCC_OscConfig+0x61c>
 8002236:	bf00      	nop
 8002238:	40021000 	.word	0x40021000
 800223c:	42420000 	.word	0x42420000
 8002240:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002244:	4b9b      	ldr	r3, [pc, #620]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1e9      	bne.n	8002224 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 80a6 	beq.w	80023aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800225e:	2300      	movs	r3, #0
 8002260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002262:	4b94      	ldr	r3, [pc, #592]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10d      	bne.n	800228a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800226e:	4b91      	ldr	r3, [pc, #580]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	4a90      	ldr	r2, [pc, #576]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 8002274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002278:	61d3      	str	r3, [r2, #28]
 800227a:	4b8e      	ldr	r3, [pc, #568]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002286:	2301      	movs	r3, #1
 8002288:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228a:	4b8b      	ldr	r3, [pc, #556]	; (80024b8 <HAL_RCC_OscConfig+0x4ec>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002292:	2b00      	cmp	r3, #0
 8002294:	d118      	bne.n	80022c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002296:	4b88      	ldr	r3, [pc, #544]	; (80024b8 <HAL_RCC_OscConfig+0x4ec>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a87      	ldr	r2, [pc, #540]	; (80024b8 <HAL_RCC_OscConfig+0x4ec>)
 800229c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a2:	f7fe feb7 	bl	8001014 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022aa:	f7fe feb3 	bl	8001014 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b64      	cmp	r3, #100	; 0x64
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e195      	b.n	80025e8 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022bc:	4b7e      	ldr	r3, [pc, #504]	; (80024b8 <HAL_RCC_OscConfig+0x4ec>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f0      	beq.n	80022aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d106      	bne.n	80022de <HAL_RCC_OscConfig+0x312>
 80022d0:	4b78      	ldr	r3, [pc, #480]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	4a77      	ldr	r2, [pc, #476]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	6213      	str	r3, [r2, #32]
 80022dc:	e02d      	b.n	800233a <HAL_RCC_OscConfig+0x36e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0x334>
 80022e6:	4b73      	ldr	r3, [pc, #460]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	4a72      	ldr	r2, [pc, #456]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 80022ec:	f023 0301 	bic.w	r3, r3, #1
 80022f0:	6213      	str	r3, [r2, #32]
 80022f2:	4b70      	ldr	r3, [pc, #448]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	4a6f      	ldr	r2, [pc, #444]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 80022f8:	f023 0304 	bic.w	r3, r3, #4
 80022fc:	6213      	str	r3, [r2, #32]
 80022fe:	e01c      	b.n	800233a <HAL_RCC_OscConfig+0x36e>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	2b05      	cmp	r3, #5
 8002306:	d10c      	bne.n	8002322 <HAL_RCC_OscConfig+0x356>
 8002308:	4b6a      	ldr	r3, [pc, #424]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	4a69      	ldr	r2, [pc, #420]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 800230e:	f043 0304 	orr.w	r3, r3, #4
 8002312:	6213      	str	r3, [r2, #32]
 8002314:	4b67      	ldr	r3, [pc, #412]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	4a66      	ldr	r2, [pc, #408]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6213      	str	r3, [r2, #32]
 8002320:	e00b      	b.n	800233a <HAL_RCC_OscConfig+0x36e>
 8002322:	4b64      	ldr	r3, [pc, #400]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	4a63      	ldr	r2, [pc, #396]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 8002328:	f023 0301 	bic.w	r3, r3, #1
 800232c:	6213      	str	r3, [r2, #32]
 800232e:	4b61      	ldr	r3, [pc, #388]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	4a60      	ldr	r2, [pc, #384]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 8002334:	f023 0304 	bic.w	r3, r3, #4
 8002338:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d015      	beq.n	800236e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002342:	f7fe fe67 	bl	8001014 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002348:	e00a      	b.n	8002360 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234a:	f7fe fe63 	bl	8001014 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	f241 3288 	movw	r2, #5000	; 0x1388
 8002358:	4293      	cmp	r3, r2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e143      	b.n	80025e8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002360:	4b54      	ldr	r3, [pc, #336]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0ee      	beq.n	800234a <HAL_RCC_OscConfig+0x37e>
 800236c:	e014      	b.n	8002398 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236e:	f7fe fe51 	bl	8001014 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002374:	e00a      	b.n	800238c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002376:	f7fe fe4d 	bl	8001014 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	f241 3288 	movw	r2, #5000	; 0x1388
 8002384:	4293      	cmp	r3, r2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e12d      	b.n	80025e8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238c:	4b49      	ldr	r3, [pc, #292]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1ee      	bne.n	8002376 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002398:	7dfb      	ldrb	r3, [r7, #23]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d105      	bne.n	80023aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239e:	4b45      	ldr	r3, [pc, #276]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	4a44      	ldr	r2, [pc, #272]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 80023a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a8:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 808c 	beq.w	80024cc <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80023b4:	4b3f      	ldr	r3, [pc, #252]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c0:	d10e      	bne.n	80023e0 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80023c2:	4b3c      	ldr	r3, [pc, #240]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d108      	bne.n	80023e0 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80023ce:	4b39      	ldr	r3, [pc, #228]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80023d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023da:	d101      	bne.n	80023e0 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e103      	b.n	80025e8 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d14e      	bne.n	8002486 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80023e8:	4b32      	ldr	r3, [pc, #200]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d009      	beq.n	8002408 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80023f4:	4b2f      	ldr	r3, [pc, #188]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002400:	429a      	cmp	r2, r3
 8002402:	d001      	beq.n	8002408 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0ef      	b.n	80025e8 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002408:	4b2c      	ldr	r3, [pc, #176]	; (80024bc <HAL_RCC_OscConfig+0x4f0>)
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240e:	f7fe fe01 	bl	8001014 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002416:	f7fe fdfd 	bl	8001014 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b64      	cmp	r3, #100	; 0x64
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e0df      	b.n	80025e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002428:	4b22      	ldr	r3, [pc, #136]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1f0      	bne.n	8002416 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002434:	4b1f      	ldr	r3, [pc, #124]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 8002436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002440:	491c      	ldr	r1, [pc, #112]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 8002442:	4313      	orrs	r3, r2
 8002444:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002446:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 8002448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	4918      	ldr	r1, [pc, #96]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 8002454:	4313      	orrs	r3, r2
 8002456:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002458:	4b18      	ldr	r3, [pc, #96]	; (80024bc <HAL_RCC_OscConfig+0x4f0>)
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245e:	f7fe fdd9 	bl	8001014 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002466:	f7fe fdd5 	bl	8001014 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b64      	cmp	r3, #100	; 0x64
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e0b7      	b.n	80025e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002478:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f0      	beq.n	8002466 <HAL_RCC_OscConfig+0x49a>
 8002484:	e022      	b.n	80024cc <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002486:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 8002488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248a:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <HAL_RCC_OscConfig+0x4e8>)
 800248c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002490:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <HAL_RCC_OscConfig+0x4f0>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7fe fdbc 	bl	8001014 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800249e:	e00f      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80024a0:	f7fe fdb8 	bl	8001014 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b64      	cmp	r3, #100	; 0x64
 80024ac:	d908      	bls.n	80024c0 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e09a      	b.n	80025e8 <HAL_RCC_OscConfig+0x61c>
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40007000 	.word	0x40007000
 80024bc:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80024c0:	4b4b      	ldr	r3, [pc, #300]	; (80025f0 <HAL_RCC_OscConfig+0x624>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1e9      	bne.n	80024a0 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 8088 	beq.w	80025e6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024d6:	4b46      	ldr	r3, [pc, #280]	; (80025f0 <HAL_RCC_OscConfig+0x624>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d068      	beq.n	80025b4 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d14d      	bne.n	8002586 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ea:	4b42      	ldr	r3, [pc, #264]	; (80025f4 <HAL_RCC_OscConfig+0x628>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7fe fd90 	bl	8001014 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f8:	f7fe fd8c 	bl	8001014 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e06e      	b.n	80025e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800250a:	4b39      	ldr	r3, [pc, #228]	; (80025f0 <HAL_RCC_OscConfig+0x624>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800251e:	d10f      	bne.n	8002540 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8002520:	4b33      	ldr	r3, [pc, #204]	; (80025f0 <HAL_RCC_OscConfig+0x624>)
 8002522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	4931      	ldr	r1, [pc, #196]	; (80025f0 <HAL_RCC_OscConfig+0x624>)
 800252a:	4313      	orrs	r3, r2
 800252c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800252e:	4b30      	ldr	r3, [pc, #192]	; (80025f0 <HAL_RCC_OscConfig+0x624>)
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	f023 020f 	bic.w	r2, r3, #15
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	492d      	ldr	r1, [pc, #180]	; (80025f0 <HAL_RCC_OscConfig+0x624>)
 800253c:	4313      	orrs	r3, r2
 800253e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002540:	4b2b      	ldr	r3, [pc, #172]	; (80025f0 <HAL_RCC_OscConfig+0x624>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002550:	430b      	orrs	r3, r1
 8002552:	4927      	ldr	r1, [pc, #156]	; (80025f0 <HAL_RCC_OscConfig+0x624>)
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002558:	4b26      	ldr	r3, [pc, #152]	; (80025f4 <HAL_RCC_OscConfig+0x628>)
 800255a:	2201      	movs	r2, #1
 800255c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255e:	f7fe fd59 	bl	8001014 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002566:	f7fe fd55 	bl	8001014 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e037      	b.n	80025e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002578:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <HAL_RCC_OscConfig+0x624>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x59a>
 8002584:	e02f      	b.n	80025e6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002586:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_RCC_OscConfig+0x628>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258c:	f7fe fd42 	bl	8001014 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002594:	f7fe fd3e 	bl	8001014 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e020      	b.n	80025e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a6:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <HAL_RCC_OscConfig+0x624>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x5c8>
 80025b2:	e018      	b.n	80025e6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e013      	b.n	80025e8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025c0:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_OscConfig+0x624>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d106      	bne.n	80025e2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d001      	beq.n	80025e6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000
 80025f4:	42420060 	.word	0x42420060

080025f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0d0      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800260c:	4b6a      	ldr	r3, [pc, #424]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d910      	bls.n	800263c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261a:	4b67      	ldr	r3, [pc, #412]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 0207 	bic.w	r2, r3, #7
 8002622:	4965      	ldr	r1, [pc, #404]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	4313      	orrs	r3, r2
 8002628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800262a:	4b63      	ldr	r3, [pc, #396]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	429a      	cmp	r2, r3
 8002636:	d001      	beq.n	800263c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0b8      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d020      	beq.n	800268a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002654:	4b59      	ldr	r3, [pc, #356]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	4a58      	ldr	r2, [pc, #352]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800265e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b00      	cmp	r3, #0
 800266a:	d005      	beq.n	8002678 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800266c:	4b53      	ldr	r3, [pc, #332]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	4a52      	ldr	r2, [pc, #328]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002676:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002678:	4b50      	ldr	r3, [pc, #320]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	494d      	ldr	r1, [pc, #308]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	4313      	orrs	r3, r2
 8002688:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d040      	beq.n	8002718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d107      	bne.n	80026ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269e:	4b47      	ldr	r3, [pc, #284]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d115      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e07f      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d107      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b6:	4b41      	ldr	r3, [pc, #260]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e073      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c6:	4b3d      	ldr	r3, [pc, #244]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e06b      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026d6:	4b39      	ldr	r3, [pc, #228]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f023 0203 	bic.w	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4936      	ldr	r1, [pc, #216]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e8:	f7fe fc94 	bl	8001014 <HAL_GetTick>
 80026ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ee:	e00a      	b.n	8002706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f0:	f7fe fc90 	bl	8001014 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fe:	4293      	cmp	r3, r2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e053      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002706:	4b2d      	ldr	r3, [pc, #180]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 020c 	and.w	r2, r3, #12
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	429a      	cmp	r2, r3
 8002716:	d1eb      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002718:	4b27      	ldr	r3, [pc, #156]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d210      	bcs.n	8002748 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002726:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 0207 	bic.w	r2, r3, #7
 800272e:	4922      	ldr	r1, [pc, #136]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	4313      	orrs	r3, r2
 8002734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002736:	4b20      	ldr	r3, [pc, #128]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d001      	beq.n	8002748 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e032      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002754:	4b19      	ldr	r3, [pc, #100]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4916      	ldr	r1, [pc, #88]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	4313      	orrs	r3, r2
 8002764:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d009      	beq.n	8002786 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002772:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	490e      	ldr	r1, [pc, #56]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	4313      	orrs	r3, r2
 8002784:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002786:	f000 f821 	bl	80027cc <HAL_RCC_GetSysClockFreq>
 800278a:	4601      	mov	r1, r0
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	091b      	lsrs	r3, r3, #4
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	4a0a      	ldr	r2, [pc, #40]	; (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002798:	5cd3      	ldrb	r3, [r2, r3]
 800279a:	fa21 f303 	lsr.w	r3, r1, r3
 800279e:	4a09      	ldr	r2, [pc, #36]	; (80027c4 <HAL_RCC_ClockConfig+0x1cc>)
 80027a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027a2:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <HAL_RCC_ClockConfig+0x1d0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe fbf2 	bl	8000f90 <HAL_InitTick>

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40022000 	.word	0x40022000
 80027bc:	40021000 	.word	0x40021000
 80027c0:	080043bc 	.word	0x080043bc
 80027c4:	20000000 	.word	0x20000000
 80027c8:	20000004 	.word	0x20000004

080027cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027d0:	b091      	sub	sp, #68	; 0x44
 80027d2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80027d4:	4b6a      	ldr	r3, [pc, #424]	; (8002980 <HAL_RCC_GetSysClockFreq+0x1b4>)
 80027d6:	f107 0414 	add.w	r4, r7, #20
 80027da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027dc:	c407      	stmia	r4!, {r0, r1, r2}
 80027de:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80027e0:	4b68      	ldr	r3, [pc, #416]	; (8002984 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027e2:	1d3c      	adds	r4, r7, #4
 80027e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	637b      	str	r3, [r7, #52]	; 0x34
 80027ee:	2300      	movs	r3, #0
 80027f0:	633b      	str	r3, [r7, #48]	; 0x30
 80027f2:	2300      	movs	r3, #0
 80027f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027f6:	2300      	movs	r3, #0
 80027f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	62bb      	str	r3, [r7, #40]	; 0x28
 8002802:	2300      	movs	r3, #0
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002806:	4b60      	ldr	r3, [pc, #384]	; (8002988 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800280c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b04      	cmp	r3, #4
 8002814:	d002      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x50>
 8002816:	2b08      	cmp	r3, #8
 8002818:	d003      	beq.n	8002822 <HAL_RCC_GetSysClockFreq+0x56>
 800281a:	e0a7      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x1a0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800281c:	4b5b      	ldr	r3, [pc, #364]	; (800298c <HAL_RCC_GetSysClockFreq+0x1c0>)
 800281e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002820:	e0a7      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002824:	0c9b      	lsrs	r3, r3, #18
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800282e:	4413      	add	r3, r2
 8002830:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8002834:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 808d 	beq.w	800295c <HAL_RCC_GetSysClockFreq+0x190>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002842:	4b51      	ldr	r3, [pc, #324]	; (8002988 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800284e:	4413      	add	r3, r2
 8002850:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8002854:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002856:	4b4c      	ldr	r3, [pc, #304]	; (8002988 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d06a      	beq.n	8002938 <HAL_RCC_GetSysClockFreq+0x16c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002862:	4b49      	ldr	r3, [pc, #292]	; (8002988 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002866:	091b      	lsrs	r3, r3, #4
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	3301      	adds	r3, #1
 800286e:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002870:	4b45      	ldr	r3, [pc, #276]	; (8002988 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002874:	0a1b      	lsrs	r3, r3, #8
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	3302      	adds	r3, #2
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	4619      	mov	r1, r3
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002888:	f04f 0400 	mov.w	r4, #0
 800288c:	fb03 f502 	mul.w	r5, r3, r2
 8002890:	fb01 f004 	mul.w	r0, r1, r4
 8002894:	4428      	add	r0, r5
 8002896:	fba1 5603 	umull	r5, r6, r1, r3
 800289a:	1983      	adds	r3, r0, r6
 800289c:	461e      	mov	r6, r3
 800289e:	4629      	mov	r1, r5
 80028a0:	4632      	mov	r2, r6
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	f04f 0400 	mov.w	r4, #0
 80028aa:	0154      	lsls	r4, r2, #5
 80028ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028b0:	014b      	lsls	r3, r1, #5
 80028b2:	4619      	mov	r1, r3
 80028b4:	4622      	mov	r2, r4
 80028b6:	1b49      	subs	r1, r1, r5
 80028b8:	eb62 0206 	sbc.w	r2, r2, r6
 80028bc:	f04f 0300 	mov.w	r3, #0
 80028c0:	f04f 0400 	mov.w	r4, #0
 80028c4:	0194      	lsls	r4, r2, #6
 80028c6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028ca:	018b      	lsls	r3, r1, #6
 80028cc:	1a5b      	subs	r3, r3, r1
 80028ce:	eb64 0402 	sbc.w	r4, r4, r2
 80028d2:	f04f 0100 	mov.w	r1, #0
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	00e2      	lsls	r2, r4, #3
 80028dc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80028e0:	00d9      	lsls	r1, r3, #3
 80028e2:	460b      	mov	r3, r1
 80028e4:	4614      	mov	r4, r2
 80028e6:	195b      	adds	r3, r3, r5
 80028e8:	eb44 0406 	adc.w	r4, r4, r6
 80028ec:	f04f 0100 	mov.w	r1, #0
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	0262      	lsls	r2, r4, #9
 80028f6:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80028fa:	0259      	lsls	r1, r3, #9
 80028fc:	460b      	mov	r3, r1
 80028fe:	4614      	mov	r4, r2
 8002900:	4698      	mov	r8, r3
 8002902:	46a1      	mov	r9, r4
 8002904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002906:	4619      	mov	r1, r3
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290e:	f04f 0400 	mov.w	r4, #0
 8002912:	fb03 f502 	mul.w	r5, r3, r2
 8002916:	fb01 f004 	mul.w	r0, r1, r4
 800291a:	4428      	add	r0, r5
 800291c:	fba1 3403 	umull	r3, r4, r1, r3
 8002920:	1902      	adds	r2, r0, r4
 8002922:	4614      	mov	r4, r2
 8002924:	461a      	mov	r2, r3
 8002926:	4623      	mov	r3, r4
 8002928:	4640      	mov	r0, r8
 800292a:	4649      	mov	r1, r9
 800292c:	f7fd fc7a 	bl	8000224 <__aeabi_uldivmod>
 8002930:	4603      	mov	r3, r0
 8002932:	460c      	mov	r4, r1
 8002934:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002936:	e007      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x17c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8002938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293a:	4a14      	ldr	r2, [pc, #80]	; (800298c <HAL_RCC_GetSysClockFreq+0x1c0>)
 800293c:	fb02 f203 	mul.w	r2, r2, r3
 8002940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002942:	fbb2 f3f3 	udiv	r3, r2, r3
 8002946:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002948:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800294c:	461a      	mov	r2, r3
 800294e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002950:	4293      	cmp	r3, r2
 8002952:	d108      	bne.n	8002966 <HAL_RCC_GetSysClockFreq+0x19a>
        {
          pllclk = pllclk / 2;
 8002954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002956:	085b      	lsrs	r3, r3, #1
 8002958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800295a:	e004      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x19a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800295c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295e:	4a0c      	ldr	r2, [pc, #48]	; (8002990 <HAL_RCC_GetSysClockFreq+0x1c4>)
 8002960:	fb02 f303 	mul.w	r3, r2, r3
 8002964:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8002966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002968:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800296a:	e002      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800296c:	4b07      	ldr	r3, [pc, #28]	; (800298c <HAL_RCC_GetSysClockFreq+0x1c0>)
 800296e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002974:	4618      	mov	r0, r3
 8002976:	3744      	adds	r7, #68	; 0x44
 8002978:	46bd      	mov	sp, r7
 800297a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800297e:	bf00      	nop
 8002980:	0800437c 	.word	0x0800437c
 8002984:	0800438c 	.word	0x0800438c
 8002988:	40021000 	.word	0x40021000
 800298c:	007a1200 	.word	0x007a1200
 8002990:	003d0900 	.word	0x003d0900

08002994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002998:	4b02      	ldr	r3, [pc, #8]	; (80029a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800299a:	681b      	ldr	r3, [r3, #0]
}
 800299c:	4618      	mov	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr
 80029a4:	20000000 	.word	0x20000000

080029a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029ac:	f7ff fff2 	bl	8002994 <HAL_RCC_GetHCLKFreq>
 80029b0:	4601      	mov	r1, r0
 80029b2:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	0a1b      	lsrs	r3, r3, #8
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	4a03      	ldr	r2, [pc, #12]	; (80029cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029be:	5cd3      	ldrb	r3, [r2, r3]
 80029c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40021000 	.word	0x40021000
 80029cc:	080043cc 	.word	0x080043cc

080029d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029d4:	f7ff ffde 	bl	8002994 <HAL_RCC_GetHCLKFreq>
 80029d8:	4601      	mov	r1, r0
 80029da:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	0adb      	lsrs	r3, r3, #11
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	4a03      	ldr	r2, [pc, #12]	; (80029f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029e6:	5cd3      	ldrb	r3, [r2, r3]
 80029e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40021000 	.word	0x40021000
 80029f4:	080043cc 	.word	0x080043cc

080029f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <RCC_Delay+0x34>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a0a      	ldr	r2, [pc, #40]	; (8002a30 <RCC_Delay+0x38>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	0a5b      	lsrs	r3, r3, #9
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	fb02 f303 	mul.w	r3, r2, r3
 8002a12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a14:	bf00      	nop
  }
  while (Delay --);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	1e5a      	subs	r2, r3, #1
 8002a1a:	60fa      	str	r2, [r7, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f9      	bne.n	8002a14 <RCC_Delay+0x1c>
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	20000000 	.word	0x20000000
 8002a30:	10624dd3 	.word	0x10624dd3

08002a34 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	2300      	movs	r3, #0
 8002a42:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d07d      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002a54:	2300      	movs	r3, #0
 8002a56:	76fb      	strb	r3, [r7, #27]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a58:	4b8b      	ldr	r3, [pc, #556]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10d      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a64:	4b88      	ldr	r3, [pc, #544]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	4a87      	ldr	r2, [pc, #540]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	61d3      	str	r3, [r2, #28]
 8002a70:	4b85      	ldr	r3, [pc, #532]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a80:	4b82      	ldr	r3, [pc, #520]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d118      	bne.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a8c:	4b7f      	ldr	r3, [pc, #508]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a7e      	ldr	r2, [pc, #504]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a98:	f7fe fabc 	bl	8001014 <HAL_GetTick>
 8002a9c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa0:	f7fe fab8 	bl	8001014 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	; 0x64
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e0e5      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab2:	4b76      	ldr	r3, [pc, #472]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002abe:	4b72      	ldr	r3, [pc, #456]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac6:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d02e      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d027      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002adc:	4b6a      	ldr	r3, [pc, #424]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ae6:	4b6a      	ldr	r3, [pc, #424]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002ae8:	2201      	movs	r2, #1
 8002aea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002aec:	4b68      	ldr	r3, [pc, #416]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002af2:	4a65      	ldr	r2, [pc, #404]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d014      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b02:	f7fe fa87 	bl	8001014 <HAL_GetTick>
 8002b06:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b08:	e00a      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0a:	f7fe fa83 	bl	8001014 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e0ae      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b20:	4b59      	ldr	r3, [pc, #356]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0ee      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b2c:	4b56      	ldr	r3, [pc, #344]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	4953      	ldr	r1, [pc, #332]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b3e:	7efb      	ldrb	r3, [r7, #27]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d105      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b44:	4b50      	ldr	r3, [pc, #320]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	4a4f      	ldr	r2, [pc, #316]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d008      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b5c:	4b4a      	ldr	r3, [pc, #296]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	4947      	ldr	r1, [pc, #284]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d008      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002b7a:	4b43      	ldr	r3, [pc, #268]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	4940      	ldr	r1, [pc, #256]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8002b98:	4b3b      	ldr	r3, [pc, #236]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	4938      	ldr	r1, [pc, #224]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8002baa:	4b37      	ldr	r3, [pc, #220]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d105      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8002bb6:	4b34      	ldr	r3, [pc, #208]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d148      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8002bcc:	4b2e      	ldr	r3, [pc, #184]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d138      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8002bd8:	4b2b      	ldr	r3, [pc, #172]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d009      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8002be4:	4b28      	ldr	r3, [pc, #160]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e042      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8002bf8:	4b23      	ldr	r3, [pc, #140]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	4920      	ldr	r1, [pc, #128]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8002c0a:	4b1f      	ldr	r3, [pc, #124]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	491c      	ldr	r1, [pc, #112]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8002c1c:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c22:	f7fe f9f7 	bl	8001014 <HAL_GetTick>
 8002c26:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c28:	e008      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c2a:	f7fe f9f3 	bl	8001014 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b64      	cmp	r3, #100	; 0x64
 8002c36:	d901      	bls.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e020      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c3c:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002c48:	e009      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8002c4a:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d001      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e00f      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0310 	and.w	r3, r3, #16
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d008      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c6a:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	4904      	ldr	r1, [pc, #16]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3720      	adds	r7, #32
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	40007000 	.word	0x40007000
 8002c90:	42420440 	.word	0x42420440
 8002c94:	42420070 	.word	0x42420070

08002c98 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002c98:	b590      	push	{r4, r7, lr}
 8002c9a:	b093      	sub	sp, #76	; 0x4c
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8002ca0:	4ba9      	ldr	r3, [pc, #676]	; (8002f48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8002ca2:	f107 0418 	add.w	r4, r7, #24
 8002ca6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ca8:	c407      	stmia	r4!, {r0, r1, r2}
 8002caa:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8002cac:	4ba7      	ldr	r3, [pc, #668]	; (8002f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8002cae:	f107 0408 	add.w	r4, r7, #8
 8002cb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8002cc8:	2300      	movs	r3, #0
 8002cca:	633b      	str	r3, [r7, #48]	; 0x30
 8002ccc:	2300      	movs	r3, #0
 8002cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	643b      	str	r3, [r7, #64]	; 0x40

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	2b0f      	cmp	r3, #15
 8002cde:	f200 8124 	bhi.w	8002f2a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 8002ce2:	a201      	add	r2, pc, #4	; (adr r2, 8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8002ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce8:	08002ea9 	.word	0x08002ea9
 8002cec:	08002f0f 	.word	0x08002f0f
 8002cf0:	08002f2b 	.word	0x08002f2b
 8002cf4:	08002e07 	.word	0x08002e07
 8002cf8:	08002f2b 	.word	0x08002f2b
 8002cfc:	08002f2b 	.word	0x08002f2b
 8002d00:	08002f2b 	.word	0x08002f2b
 8002d04:	08002e59 	.word	0x08002e59
 8002d08:	08002f2b 	.word	0x08002f2b
 8002d0c:	08002f2b 	.word	0x08002f2b
 8002d10:	08002f2b 	.word	0x08002f2b
 8002d14:	08002f2b 	.word	0x08002f2b
 8002d18:	08002f2b 	.word	0x08002f2b
 8002d1c:	08002f2b 	.word	0x08002f2b
 8002d20:	08002f2b 	.word	0x08002f2b
 8002d24:	08002d29 	.word	0x08002d29
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002d28:	4b89      	ldr	r3, [pc, #548]	; (8002f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002d2e:	4b88      	ldr	r3, [pc, #544]	; (8002f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 80f9 	beq.w	8002f2e <HAL_RCCEx_GetPeriphCLKFreq+0x296>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3e:	0c9b      	lsrs	r3, r3, #18
 8002d40:	f003 030f 	and.w	r3, r3, #15
 8002d44:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002d48:	4413      	add	r3, r2
 8002d4a:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8002d4e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d03e      	beq.n	8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002d5a:	4b7d      	ldr	r3, [pc, #500]	; (8002f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002d66:	4413      	add	r3, r2
 8002d68:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8002d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002d6e:	4b78      	ldr	r3, [pc, #480]	; (8002f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d01c      	beq.n	8002db4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002d7a:	4b75      	ldr	r3, [pc, #468]	; (8002f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7e:	091b      	lsrs	r3, r3, #4
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	3301      	adds	r3, #1
 8002d86:	62fb      	str	r3, [r7, #44]	; 0x2c
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002d88:	4b71      	ldr	r3, [pc, #452]	; (8002f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	0a1b      	lsrs	r3, r3, #8
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	3302      	adds	r3, #2
 8002d94:	637b      	str	r3, [r7, #52]	; 0x34
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 8002d96:	4a6f      	ldr	r2, [pc, #444]	; (8002f54 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8002d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002da0:	fb02 f203 	mul.w	r2, r2, r3
 8002da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dac:	fb02 f303 	mul.w	r3, r2, r3
 8002db0:	647b      	str	r3, [r7, #68]	; 0x44
 8002db2:	e007      	b.n	8002dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002db4:	4a67      	ldr	r2, [pc, #412]	; (8002f54 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8002db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbe:	fb02 f303 	mul.w	r3, r2, r3
 8002dc2:	647b      	str	r3, [r7, #68]	; 0x44
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002dc4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002dc8:	461a      	mov	r2, r3
 8002dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d108      	bne.n	8002de2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
          {
            pllclk = pllclk / 2;
 8002dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd2:	085b      	lsrs	r3, r3, #1
 8002dd4:	647b      	str	r3, [r7, #68]	; 0x44
 8002dd6:	e004      	b.n	8002de2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dda:	4a5f      	ldr	r2, [pc, #380]	; (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8002ddc:	fb02 f303 	mul.w	r3, r2, r3
 8002de0:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 8002de2:	4b5b      	ldr	r3, [pc, #364]	; (8002f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dee:	d102      	bne.n	8002df6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 8002df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002df2:	643b      	str	r3, [r7, #64]	; 0x40
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002df4:	e09b      	b.n	8002f2e <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          frequency = (2 * pllclk) / 3;
 8002df6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	4a58      	ldr	r2, [pc, #352]	; (8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	085b      	lsrs	r3, r3, #1
 8002e02:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002e04:	e093      	b.n	8002f2e <HAL_RCCEx_GetPeriphCLKFreq+0x296>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 8002e06:	4b52      	ldr	r3, [pc, #328]	; (8002f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d103      	bne.n	8002e1a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 8002e12:	f7ff fcdb 	bl	80027cc <HAL_RCC_GetSysClockFreq>
 8002e16:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002e18:	e08b      	b.n	8002f32 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8002e1a:	4b4d      	ldr	r3, [pc, #308]	; (8002f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 8085 	beq.w	8002f32 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002e28:	4b49      	ldr	r3, [pc, #292]	; (8002f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2c:	091b      	lsrs	r3, r3, #4
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	3301      	adds	r3, #1
 8002e34:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8002e36:	4b46      	ldr	r3, [pc, #280]	; (8002f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	0b1b      	lsrs	r3, r3, #12
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	3302      	adds	r3, #2
 8002e42:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8002e44:	4a43      	ldr	r2, [pc, #268]	; (8002f54 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8002e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e4e:	fb02 f303 	mul.w	r3, r2, r3
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002e56:	e06c      	b.n	8002f32 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 8002e58:	4b3d      	ldr	r3, [pc, #244]	; (8002f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d103      	bne.n	8002e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 8002e64:	f7ff fcb2 	bl	80027cc <HAL_RCC_GetSysClockFreq>
 8002e68:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002e6a:	e064      	b.n	8002f36 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8002e6c:	4b38      	ldr	r3, [pc, #224]	; (8002f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d05e      	beq.n	8002f36 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002e78:	4b35      	ldr	r3, [pc, #212]	; (8002f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7c:	091b      	lsrs	r3, r3, #4
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	3301      	adds	r3, #1
 8002e84:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8002e86:	4b32      	ldr	r3, [pc, #200]	; (8002f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	0b1b      	lsrs	r3, r3, #12
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	3302      	adds	r3, #2
 8002e92:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8002e94:	4a2f      	ldr	r2, [pc, #188]	; (8002f54 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8002e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002ea6:	e046      	b.n	8002f36 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8002ea8:	4b29      	ldr	r3, [pc, #164]	; (8002f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb8:	d108      	bne.n	8002ecc <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8002eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      {
        frequency = LSE_VALUE;
 8002ec4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ec8:	643b      	str	r3, [r7, #64]	; 0x40
 8002eca:	e01f      	b.n	8002f0c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ed6:	d109      	bne.n	8002eec <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8002ed8:	4b1d      	ldr	r3, [pc, #116]	; (8002f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_RCCEx_GetPeriphCLKFreq+0x254>
      {
        frequency = LSI_VALUE;
 8002ee4:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002ee8:	643b      	str	r3, [r7, #64]	; 0x40
 8002eea:	e00f      	b.n	8002f0c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ef6:	d120      	bne.n	8002f3a <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 8002ef8:	4b15      	ldr	r3, [pc, #84]	; (8002f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d01a      	beq.n	8002f3a <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
      {
        frequency = HSE_VALUE / 128U;
 8002f04:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002f08:	643b      	str	r3, [r7, #64]	; 0x40
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8002f0a:	e016      	b.n	8002f3a <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 8002f0c:	e015      	b.n	8002f3a <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002f0e:	f7ff fd5f 	bl	80029d0 <HAL_RCC_GetPCLK2Freq>
 8002f12:	4602      	mov	r2, r0
 8002f14:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	0b9b      	lsrs	r3, r3, #14
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f26:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002f28:	e008      	b.n	8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
    }
    default:
    {
      break;
 8002f2a:	bf00      	nop
 8002f2c:	e006      	b.n	8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8002f2e:	bf00      	nop
 8002f30:	e004      	b.n	8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8002f32:	bf00      	nop
 8002f34:	e002      	b.n	8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8002f36:	bf00      	nop
 8002f38:	e000      	b.n	8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8002f3a:	bf00      	nop
    }
  }
  return (frequency);
 8002f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	374c      	adds	r7, #76	; 0x4c
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd90      	pop	{r4, r7, pc}
 8002f46:	bf00      	nop
 8002f48:	0800439c 	.word	0x0800439c
 8002f4c:	080043ac 	.word	0x080043ac
 8002f50:	40021000 	.word	0x40021000
 8002f54:	007a1200 	.word	0x007a1200
 8002f58:	003d0900 	.word	0x003d0900
 8002f5c:	aaaaaaab 	.word	0xaaaaaaab

08002f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e01d      	b.n	8002fae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7fd fe5e 	bl	8000c48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	f000 fa30 	bl	8003404 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b082      	sub	sp, #8
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e01d      	b.n	8003004 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d106      	bne.n	8002fe2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7fd fe51 	bl	8000c84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4610      	mov	r0, r2
 8002ff6:	f000 fa05 	bl	8003404 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2201      	movs	r2, #1
 800301c:	6839      	ldr	r1, [r7, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fc7a 	bl	8003918 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a10      	ldr	r2, [pc, #64]	; (800306c <HAL_TIM_PWM_Start+0x60>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d107      	bne.n	800303e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800303c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2b06      	cmp	r3, #6
 800304e:	d007      	beq.n	8003060 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0201 	orr.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40012c00 	.word	0x40012c00

08003070 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2200      	movs	r2, #0
 8003080:	6839      	ldr	r1, [r7, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fc48 	bl	8003918 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1d      	ldr	r2, [pc, #116]	; (8003104 <HAL_TIM_PWM_Stop+0x94>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d117      	bne.n	80030c2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6a1a      	ldr	r2, [r3, #32]
 8003098:	f241 1311 	movw	r3, #4369	; 0x1111
 800309c:	4013      	ands	r3, r2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10f      	bne.n	80030c2 <HAL_TIM_PWM_Stop+0x52>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6a1a      	ldr	r2, [r3, #32]
 80030a8:	f240 4344 	movw	r3, #1092	; 0x444
 80030ac:	4013      	ands	r3, r2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d107      	bne.n	80030c2 <HAL_TIM_PWM_Stop+0x52>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6a1a      	ldr	r2, [r3, #32]
 80030c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10f      	bne.n	80030f2 <HAL_TIM_PWM_Stop+0x82>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6a1a      	ldr	r2, [r3, #32]
 80030d8:	f240 4344 	movw	r3, #1092	; 0x444
 80030dc:	4013      	ands	r3, r2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d107      	bne.n	80030f2 <HAL_TIM_PWM_Stop+0x82>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0201 	bic.w	r2, r2, #1
 80030f0:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40012c00 	.word	0x40012c00

08003108 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800311e:	2302      	movs	r3, #2
 8003120:	e0b4      	b.n	800328c <HAL_TIM_PWM_ConfigChannel+0x184>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2202      	movs	r2, #2
 800312e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b0c      	cmp	r3, #12
 8003136:	f200 809f 	bhi.w	8003278 <HAL_TIM_PWM_ConfigChannel+0x170>
 800313a:	a201      	add	r2, pc, #4	; (adr r2, 8003140 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800313c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003140:	08003175 	.word	0x08003175
 8003144:	08003279 	.word	0x08003279
 8003148:	08003279 	.word	0x08003279
 800314c:	08003279 	.word	0x08003279
 8003150:	080031b5 	.word	0x080031b5
 8003154:	08003279 	.word	0x08003279
 8003158:	08003279 	.word	0x08003279
 800315c:	08003279 	.word	0x08003279
 8003160:	080031f7 	.word	0x080031f7
 8003164:	08003279 	.word	0x08003279
 8003168:	08003279 	.word	0x08003279
 800316c:	08003279 	.word	0x08003279
 8003170:	08003237 	.word	0x08003237
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	4618      	mov	r0, r3
 800317c:	f000 f9ae 	bl	80034dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699a      	ldr	r2, [r3, #24]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0208 	orr.w	r2, r2, #8
 800318e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699a      	ldr	r2, [r3, #24]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0204 	bic.w	r2, r2, #4
 800319e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6999      	ldr	r1, [r3, #24]
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	619a      	str	r2, [r3, #24]
      break;
 80031b2:	e062      	b.n	800327a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 f9f4 	bl	80035a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	699a      	ldr	r2, [r3, #24]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6999      	ldr	r1, [r3, #24]
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	021a      	lsls	r2, r3, #8
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	619a      	str	r2, [r3, #24]
      break;
 80031f4:	e041      	b.n	800327a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68b9      	ldr	r1, [r7, #8]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 fa3d 	bl	800367c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	69da      	ldr	r2, [r3, #28]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f042 0208 	orr.w	r2, r2, #8
 8003210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	69da      	ldr	r2, [r3, #28]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0204 	bic.w	r2, r2, #4
 8003220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	69d9      	ldr	r1, [r3, #28]
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	61da      	str	r2, [r3, #28]
      break;
 8003234:	e021      	b.n	800327a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68b9      	ldr	r1, [r7, #8]
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fa87 	bl	8003750 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	69da      	ldr	r2, [r3, #28]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	69da      	ldr	r2, [r3, #28]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	69d9      	ldr	r1, [r3, #28]
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	021a      	lsls	r2, r3, #8
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	61da      	str	r2, [r3, #28]
      break;
 8003276:	e000      	b.n	800327a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003278:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <HAL_TIM_ConfigClockSource+0x18>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e0a6      	b.n	80033fa <HAL_TIM_ConfigClockSource+0x166>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b40      	cmp	r3, #64	; 0x40
 80032e2:	d067      	beq.n	80033b4 <HAL_TIM_ConfigClockSource+0x120>
 80032e4:	2b40      	cmp	r3, #64	; 0x40
 80032e6:	d80b      	bhi.n	8003300 <HAL_TIM_ConfigClockSource+0x6c>
 80032e8:	2b10      	cmp	r3, #16
 80032ea:	d073      	beq.n	80033d4 <HAL_TIM_ConfigClockSource+0x140>
 80032ec:	2b10      	cmp	r3, #16
 80032ee:	d802      	bhi.n	80032f6 <HAL_TIM_ConfigClockSource+0x62>
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d06f      	beq.n	80033d4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80032f4:	e078      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80032f6:	2b20      	cmp	r3, #32
 80032f8:	d06c      	beq.n	80033d4 <HAL_TIM_ConfigClockSource+0x140>
 80032fa:	2b30      	cmp	r3, #48	; 0x30
 80032fc:	d06a      	beq.n	80033d4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80032fe:	e073      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003300:	2b70      	cmp	r3, #112	; 0x70
 8003302:	d00d      	beq.n	8003320 <HAL_TIM_ConfigClockSource+0x8c>
 8003304:	2b70      	cmp	r3, #112	; 0x70
 8003306:	d804      	bhi.n	8003312 <HAL_TIM_ConfigClockSource+0x7e>
 8003308:	2b50      	cmp	r3, #80	; 0x50
 800330a:	d033      	beq.n	8003374 <HAL_TIM_ConfigClockSource+0xe0>
 800330c:	2b60      	cmp	r3, #96	; 0x60
 800330e:	d041      	beq.n	8003394 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003310:	e06a      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003316:	d066      	beq.n	80033e6 <HAL_TIM_ConfigClockSource+0x152>
 8003318:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800331c:	d017      	beq.n	800334e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800331e:	e063      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6818      	ldr	r0, [r3, #0]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	6899      	ldr	r1, [r3, #8]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f000 fad3 	bl	80038da <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003342:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	609a      	str	r2, [r3, #8]
      break;
 800334c:	e04c      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6818      	ldr	r0, [r3, #0]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	6899      	ldr	r1, [r3, #8]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f000 fabc 	bl	80038da <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003370:	609a      	str	r2, [r3, #8]
      break;
 8003372:	e039      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	6859      	ldr	r1, [r3, #4]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	461a      	mov	r2, r3
 8003382:	f000 fa33 	bl	80037ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2150      	movs	r1, #80	; 0x50
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fa8a 	bl	80038a6 <TIM_ITRx_SetConfig>
      break;
 8003392:	e029      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	6859      	ldr	r1, [r3, #4]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	461a      	mov	r2, r3
 80033a2:	f000 fa51 	bl	8003848 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2160      	movs	r1, #96	; 0x60
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 fa7a 	bl	80038a6 <TIM_ITRx_SetConfig>
      break;
 80033b2:	e019      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6818      	ldr	r0, [r3, #0]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	6859      	ldr	r1, [r3, #4]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	461a      	mov	r2, r3
 80033c2:	f000 fa13 	bl	80037ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2140      	movs	r1, #64	; 0x40
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fa6a 	bl	80038a6 <TIM_ITRx_SetConfig>
      break;
 80033d2:	e009      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4619      	mov	r1, r3
 80033de:	4610      	mov	r0, r2
 80033e0:	f000 fa61 	bl	80038a6 <TIM_ITRx_SetConfig>
      break;
 80033e4:	e000      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80033e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a2d      	ldr	r2, [pc, #180]	; (80034cc <TIM_Base_SetConfig+0xc8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00f      	beq.n	800343c <TIM_Base_SetConfig+0x38>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003422:	d00b      	beq.n	800343c <TIM_Base_SetConfig+0x38>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a2a      	ldr	r2, [pc, #168]	; (80034d0 <TIM_Base_SetConfig+0xcc>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d007      	beq.n	800343c <TIM_Base_SetConfig+0x38>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a29      	ldr	r2, [pc, #164]	; (80034d4 <TIM_Base_SetConfig+0xd0>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d003      	beq.n	800343c <TIM_Base_SetConfig+0x38>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a28      	ldr	r2, [pc, #160]	; (80034d8 <TIM_Base_SetConfig+0xd4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d108      	bne.n	800344e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a1e      	ldr	r2, [pc, #120]	; (80034cc <TIM_Base_SetConfig+0xc8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d00f      	beq.n	8003476 <TIM_Base_SetConfig+0x72>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800345c:	d00b      	beq.n	8003476 <TIM_Base_SetConfig+0x72>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a1b      	ldr	r2, [pc, #108]	; (80034d0 <TIM_Base_SetConfig+0xcc>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d007      	beq.n	8003476 <TIM_Base_SetConfig+0x72>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a1a      	ldr	r2, [pc, #104]	; (80034d4 <TIM_Base_SetConfig+0xd0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d003      	beq.n	8003476 <TIM_Base_SetConfig+0x72>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a19      	ldr	r2, [pc, #100]	; (80034d8 <TIM_Base_SetConfig+0xd4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d108      	bne.n	8003488 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800347c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	4313      	orrs	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a07      	ldr	r2, [pc, #28]	; (80034cc <TIM_Base_SetConfig+0xc8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d103      	bne.n	80034bc <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	615a      	str	r2, [r3, #20]
}
 80034c2:	bf00      	nop
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr
 80034cc:	40012c00 	.word	0x40012c00
 80034d0:	40000400 	.word	0x40000400
 80034d4:	40000800 	.word	0x40000800
 80034d8:	40000c00 	.word	0x40000c00

080034dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	f023 0201 	bic.w	r2, r3, #1
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 0303 	bic.w	r3, r3, #3
 8003512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	4313      	orrs	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f023 0302 	bic.w	r3, r3, #2
 8003524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4313      	orrs	r3, r2
 800352e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a1c      	ldr	r2, [pc, #112]	; (80035a4 <TIM_OC1_SetConfig+0xc8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d10c      	bne.n	8003552 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f023 0308 	bic.w	r3, r3, #8
 800353e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	4313      	orrs	r3, r2
 8003548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f023 0304 	bic.w	r3, r3, #4
 8003550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a13      	ldr	r2, [pc, #76]	; (80035a4 <TIM_OC1_SetConfig+0xc8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d111      	bne.n	800357e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	621a      	str	r2, [r3, #32]
}
 8003598:	bf00      	nop
 800359a:	371c      	adds	r7, #28
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40012c00 	.word	0x40012c00

080035a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	f023 0210 	bic.w	r2, r3, #16
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	021b      	lsls	r3, r3, #8
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f023 0320 	bic.w	r3, r3, #32
 80035f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	011b      	lsls	r3, r3, #4
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a1d      	ldr	r2, [pc, #116]	; (8003678 <TIM_OC2_SetConfig+0xd0>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d10d      	bne.n	8003624 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800360e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4313      	orrs	r3, r2
 800361a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003622:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a14      	ldr	r2, [pc, #80]	; (8003678 <TIM_OC2_SetConfig+0xd0>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d113      	bne.n	8003654 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003632:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800363a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	621a      	str	r2, [r3, #32]
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr
 8003678:	40012c00 	.word	0x40012c00

0800367c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0303 	bic.w	r3, r3, #3
 80036b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	021b      	lsls	r3, r3, #8
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a1d      	ldr	r2, [pc, #116]	; (800374c <TIM_OC3_SetConfig+0xd0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d10d      	bne.n	80036f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	021b      	lsls	r3, r3, #8
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a14      	ldr	r2, [pc, #80]	; (800374c <TIM_OC3_SetConfig+0xd0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d113      	bne.n	8003726 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800370c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	4313      	orrs	r3, r2
 8003718:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4313      	orrs	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	621a      	str	r2, [r3, #32]
}
 8003740:	bf00      	nop
 8003742:	371c      	adds	r7, #28
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	40012c00 	.word	0x40012c00

08003750 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800377e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	021b      	lsls	r3, r3, #8
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4313      	orrs	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800379a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	031b      	lsls	r3, r3, #12
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a0f      	ldr	r2, [pc, #60]	; (80037e8 <TIM_OC4_SetConfig+0x98>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d109      	bne.n	80037c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	019b      	lsls	r3, r3, #6
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	621a      	str	r2, [r3, #32]
}
 80037de:	bf00      	nop
 80037e0:	371c      	adds	r7, #28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bc80      	pop	{r7}
 80037e6:	4770      	bx	lr
 80037e8:	40012c00 	.word	0x40012c00

080037ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	f023 0201 	bic.w	r2, r3, #1
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	4313      	orrs	r3, r2
 8003820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f023 030a 	bic.w	r3, r3, #10
 8003828:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	4313      	orrs	r3, r2
 8003830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	621a      	str	r2, [r3, #32]
}
 800383e:	bf00      	nop
 8003840:	371c      	adds	r7, #28
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr

08003848 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003848:	b480      	push	{r7}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	f023 0210 	bic.w	r2, r3, #16
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003872:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	031b      	lsls	r3, r3, #12
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003884:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	621a      	str	r2, [r3, #32]
}
 800389c:	bf00      	nop
 800389e:	371c      	adds	r7, #28
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bc80      	pop	{r7}
 80038a4:	4770      	bx	lr

080038a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b085      	sub	sp, #20
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f043 0307 	orr.w	r3, r3, #7
 80038c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	609a      	str	r2, [r3, #8]
}
 80038d0:	bf00      	nop
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bc80      	pop	{r7}
 80038d8:	4770      	bx	lr

080038da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038da:	b480      	push	{r7}
 80038dc:	b087      	sub	sp, #28
 80038de:	af00      	add	r7, sp, #0
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	607a      	str	r2, [r7, #4]
 80038e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	021a      	lsls	r2, r3, #8
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	431a      	orrs	r2, r3
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	4313      	orrs	r3, r2
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	4313      	orrs	r3, r2
 8003906:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	609a      	str	r2, [r3, #8]
}
 800390e:	bf00      	nop
 8003910:	371c      	adds	r7, #28
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr

08003918 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f003 031f 	and.w	r3, r3, #31
 800392a:	2201      	movs	r2, #1
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a1a      	ldr	r2, [r3, #32]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	43db      	mvns	r3, r3
 800393a:	401a      	ands	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a1a      	ldr	r2, [r3, #32]
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f003 031f 	and.w	r3, r3, #31
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	fa01 f303 	lsl.w	r3, r1, r3
 8003950:	431a      	orrs	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	621a      	str	r2, [r3, #32]
}
 8003956:	bf00      	nop
 8003958:	371c      	adds	r7, #28
 800395a:	46bd      	mov	sp, r7
 800395c:	bc80      	pop	{r7}
 800395e:	4770      	bx	lr

08003960 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003974:	2302      	movs	r3, #2
 8003976:	e032      	b.n	80039de <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039b0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr

080039e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e03d      	b.n	8003a80 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bc80      	pop	{r7}
 8003a88:	4770      	bx	lr

08003a8a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b082      	sub	sp, #8
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e03f      	b.n	8003b1c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d106      	bne.n	8003ab6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7fd f96b 	bl	8000d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2224      	movs	r2, #36	; 0x24
 8003aba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68da      	ldr	r2, [r3, #12]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003acc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fb42 	bl	8004158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691a      	ldr	r2, [r3, #16]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ae2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695a      	ldr	r2, [r3, #20]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003af2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b02:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b088      	sub	sp, #32
 8003b28:	af02      	add	r7, sp, #8
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	4613      	mov	r3, r2
 8003b32:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	f040 8083 	bne.w	8003c4c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <HAL_UART_Transmit+0x2e>
 8003b4c:	88fb      	ldrh	r3, [r7, #6]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e07b      	b.n	8003c4e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_UART_Transmit+0x40>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e074      	b.n	8003c4e <HAL_UART_Transmit+0x12a>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2221      	movs	r2, #33	; 0x21
 8003b76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003b7a:	f7fd fa4b 	bl	8001014 <HAL_GetTick>
 8003b7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	88fa      	ldrh	r2, [r7, #6]
 8003b84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	88fa      	ldrh	r2, [r7, #6]
 8003b8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b8c:	e042      	b.n	8003c14 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba4:	d122      	bne.n	8003bec <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2200      	movs	r2, #0
 8003bae:	2180      	movs	r1, #128	; 0x80
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 f968 	bl	8003e86 <UART_WaitOnFlagUntilTimeout>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e046      	b.n	8003c4e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bd2:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d103      	bne.n	8003be4 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	3302      	adds	r3, #2
 8003be0:	60bb      	str	r3, [r7, #8]
 8003be2:	e017      	b.n	8003c14 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	3301      	adds	r3, #1
 8003be8:	60bb      	str	r3, [r7, #8]
 8003bea:	e013      	b.n	8003c14 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	2180      	movs	r1, #128	; 0x80
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 f945 	bl	8003e86 <UART_WaitOnFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e023      	b.n	8003c4e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	60ba      	str	r2, [r7, #8]
 8003c0c:	781a      	ldrb	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1b7      	bne.n	8003b8e <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2200      	movs	r2, #0
 8003c26:	2140      	movs	r1, #64	; 0x40
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 f92c 	bl	8003e86 <UART_WaitOnFlagUntilTimeout>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e00a      	b.n	8003c4e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	e000      	b.n	8003c4e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003c4c:	2302      	movs	r3, #2
  }
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10d      	bne.n	8003caa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	f003 0320 	and.w	r3, r3, #32
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d008      	beq.n	8003caa <HAL_UART_IRQHandler+0x52>
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f9d7 	bl	8004056 <UART_Receive_IT>
      return;
 8003ca8:	e0cc      	b.n	8003e44 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 80ab 	beq.w	8003e08 <HAL_UART_IRQHandler+0x1b0>
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d105      	bne.n	8003cc8 <HAL_UART_IRQHandler+0x70>
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 80a0 	beq.w	8003e08 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <HAL_UART_IRQHandler+0x90>
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce0:	f043 0201 	orr.w	r2, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f003 0304 	and.w	r3, r3, #4
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <HAL_UART_IRQHandler+0xb0>
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d00:	f043 0202 	orr.w	r2, r3, #2
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <HAL_UART_IRQHandler+0xd0>
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d20:	f043 0204 	orr.w	r2, r3, #4
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00a      	beq.n	8003d48 <HAL_UART_IRQHandler+0xf0>
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d40:	f043 0208 	orr.w	r2, r3, #8
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d078      	beq.n	8003e42 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f003 0320 	and.w	r3, r3, #32
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d007      	beq.n	8003d6a <HAL_UART_IRQHandler+0x112>
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	f003 0320 	and.w	r3, r3, #32
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 f976 	bl	8004056 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	bf14      	ite	ne
 8003d78:	2301      	movne	r3, #1
 8003d7a:	2300      	moveq	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d102      	bne.n	8003d92 <HAL_UART_IRQHandler+0x13a>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d031      	beq.n	8003df6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f8c1 	bl	8003f1a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d023      	beq.n	8003dee <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695a      	ldr	r2, [r3, #20]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003db4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d013      	beq.n	8003de6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc2:	4a22      	ldr	r2, [pc, #136]	; (8003e4c <HAL_UART_IRQHandler+0x1f4>)
 8003dc4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fd fe6c 	bl	8001aa8 <HAL_DMA_Abort_IT>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d016      	beq.n	8003e04 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003de0:	4610      	mov	r0, r2
 8003de2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de4:	e00e      	b.n	8003e04 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f844 	bl	8003e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dec:	e00a      	b.n	8003e04 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f840 	bl	8003e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df4:	e006      	b.n	8003e04 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f83c 	bl	8003e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003e02:	e01e      	b.n	8003e42 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e04:	bf00      	nop
    return;
 8003e06:	e01c      	b.n	8003e42 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d008      	beq.n	8003e24 <HAL_UART_IRQHandler+0x1cc>
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f8ad 	bl	8003f7c <UART_Transmit_IT>
    return;
 8003e22:	e00f      	b.n	8003e44 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <HAL_UART_IRQHandler+0x1ec>
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d005      	beq.n	8003e44 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f8f4 	bl	8004026 <UART_EndTransmit_IT>
    return;
 8003e3e:	bf00      	nop
 8003e40:	e000      	b.n	8003e44 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003e42:	bf00      	nop
  }
}
 8003e44:	3720      	adds	r7, #32
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	08003f55 	.word	0x08003f55

08003e50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bc80      	pop	{r7}
 8003e60:	4770      	bx	lr

08003e62 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bc80      	pop	{r7}
 8003e72:	4770      	bx	lr

08003e74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr

08003e86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	603b      	str	r3, [r7, #0]
 8003e92:	4613      	mov	r3, r2
 8003e94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e96:	e02c      	b.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9e:	d028      	beq.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d007      	beq.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ea6:	f7fd f8b5 	bl	8001014 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d21d      	bcs.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ec4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695a      	ldr	r2, [r3, #20]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0201 	bic.w	r2, r2, #1
 8003ed4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e00f      	b.n	8003f12 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	4013      	ands	r3, r2
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	bf0c      	ite	eq
 8003f02:	2301      	moveq	r3, #1
 8003f04:	2300      	movne	r3, #0
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	461a      	mov	r2, r3
 8003f0a:	79fb      	ldrb	r3, [r7, #7]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d0c3      	beq.n	8003e98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f30:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695a      	ldr	r2, [r3, #20]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0201 	bic.w	r2, r2, #1
 8003f40:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr

08003f54 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f7ff ff80 	bl	8003e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f74:	bf00      	nop
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b21      	cmp	r3, #33	; 0x21
 8003f8e:	d144      	bne.n	800401a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f98:	d11a      	bne.n	8003fd0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fae:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d105      	bne.n	8003fc4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	1c9a      	adds	r2, r3, #2
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	621a      	str	r2, [r3, #32]
 8003fc2:	e00e      	b.n	8003fe2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	621a      	str	r2, [r3, #32]
 8003fce:	e008      	b.n	8003fe2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	1c59      	adds	r1, r3, #1
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6211      	str	r1, [r2, #32]
 8003fda:	781a      	ldrb	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	4619      	mov	r1, r3
 8003ff0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10f      	bne.n	8004016 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004004:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004014:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	e000      	b.n	800401c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800401a:	2302      	movs	r3, #2
  }
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr

08004026 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b082      	sub	sp, #8
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800403c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7ff ff02 	bl	8003e50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b084      	sub	sp, #16
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b22      	cmp	r3, #34	; 0x22
 8004068:	d171      	bne.n	800414e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004072:	d123      	bne.n	80040bc <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004078:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10e      	bne.n	80040a0 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	b29b      	uxth	r3, r3
 800408a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004098:	1c9a      	adds	r2, r3, #2
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	629a      	str	r2, [r3, #40]	; 0x28
 800409e:	e029      	b.n	80040f4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	629a      	str	r2, [r3, #40]	; 0x28
 80040ba:	e01b      	b.n	80040f4 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10a      	bne.n	80040da <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6858      	ldr	r0, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ce:	1c59      	adds	r1, r3, #1
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6291      	str	r1, [r2, #40]	; 0x28
 80040d4:	b2c2      	uxtb	r2, r0
 80040d6:	701a      	strb	r2, [r3, #0]
 80040d8:	e00c      	b.n	80040f4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e6:	1c58      	adds	r0, r3, #1
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	6288      	str	r0, [r1, #40]	; 0x28
 80040ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040f0:	b2d2      	uxtb	r2, r2
 80040f2:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	4619      	mov	r1, r3
 8004102:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004104:	2b00      	cmp	r3, #0
 8004106:	d120      	bne.n	800414a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0220 	bic.w	r2, r2, #32
 8004116:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004126:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695a      	ldr	r2, [r3, #20]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0201 	bic.w	r2, r2, #1
 8004136:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff fe8e 	bl	8003e62 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	e002      	b.n	8004150 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	e000      	b.n	8004150 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800414e:	2302      	movs	r3, #2
  }
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68da      	ldr	r2, [r3, #12]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689a      	ldr	r2, [r3, #8]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	4313      	orrs	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004192:	f023 030c 	bic.w	r3, r3, #12
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6812      	ldr	r2, [r2, #0]
 800419a:	68f9      	ldr	r1, [r7, #12]
 800419c:	430b      	orrs	r3, r1
 800419e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699a      	ldr	r2, [r3, #24]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a52      	ldr	r2, [pc, #328]	; (8004304 <UART_SetConfig+0x1ac>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d14e      	bne.n	800425e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80041c0:	f7fe fc06 	bl	80029d0 <HAL_RCC_GetPCLK2Freq>
 80041c4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	4613      	mov	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	009a      	lsls	r2, r3, #2
 80041d0:	441a      	add	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041dc:	4a4a      	ldr	r2, [pc, #296]	; (8004308 <UART_SetConfig+0x1b0>)
 80041de:	fba2 2303 	umull	r2, r3, r2, r3
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	0119      	lsls	r1, r3, #4
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	4613      	mov	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	009a      	lsls	r2, r3, #2
 80041f0:	441a      	add	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80041fc:	4b42      	ldr	r3, [pc, #264]	; (8004308 <UART_SetConfig+0x1b0>)
 80041fe:	fba3 0302 	umull	r0, r3, r3, r2
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	2064      	movs	r0, #100	; 0x64
 8004206:	fb00 f303 	mul.w	r3, r0, r3
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	3332      	adds	r3, #50	; 0x32
 8004210:	4a3d      	ldr	r2, [pc, #244]	; (8004308 <UART_SetConfig+0x1b0>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800421c:	4419      	add	r1, r3
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	009a      	lsls	r2, r3, #2
 8004228:	441a      	add	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	fbb2 f2f3 	udiv	r2, r2, r3
 8004234:	4b34      	ldr	r3, [pc, #208]	; (8004308 <UART_SetConfig+0x1b0>)
 8004236:	fba3 0302 	umull	r0, r3, r3, r2
 800423a:	095b      	lsrs	r3, r3, #5
 800423c:	2064      	movs	r0, #100	; 0x64
 800423e:	fb00 f303 	mul.w	r3, r0, r3
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	011b      	lsls	r3, r3, #4
 8004246:	3332      	adds	r3, #50	; 0x32
 8004248:	4a2f      	ldr	r2, [pc, #188]	; (8004308 <UART_SetConfig+0x1b0>)
 800424a:	fba2 2303 	umull	r2, r3, r2, r3
 800424e:	095b      	lsrs	r3, r3, #5
 8004250:	f003 020f 	and.w	r2, r3, #15
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	440a      	add	r2, r1
 800425a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800425c:	e04d      	b.n	80042fa <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800425e:	f7fe fba3 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8004262:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	4613      	mov	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	009a      	lsls	r2, r3, #2
 800426e:	441a      	add	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	fbb2 f3f3 	udiv	r3, r2, r3
 800427a:	4a23      	ldr	r2, [pc, #140]	; (8004308 <UART_SetConfig+0x1b0>)
 800427c:	fba2 2303 	umull	r2, r3, r2, r3
 8004280:	095b      	lsrs	r3, r3, #5
 8004282:	0119      	lsls	r1, r3, #4
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	4613      	mov	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	009a      	lsls	r2, r3, #2
 800428e:	441a      	add	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	fbb2 f2f3 	udiv	r2, r2, r3
 800429a:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <UART_SetConfig+0x1b0>)
 800429c:	fba3 0302 	umull	r0, r3, r3, r2
 80042a0:	095b      	lsrs	r3, r3, #5
 80042a2:	2064      	movs	r0, #100	; 0x64
 80042a4:	fb00 f303 	mul.w	r3, r0, r3
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	3332      	adds	r3, #50	; 0x32
 80042ae:	4a16      	ldr	r2, [pc, #88]	; (8004308 <UART_SetConfig+0x1b0>)
 80042b0:	fba2 2303 	umull	r2, r3, r2, r3
 80042b4:	095b      	lsrs	r3, r3, #5
 80042b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ba:	4419      	add	r1, r3
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	4613      	mov	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	009a      	lsls	r2, r3, #2
 80042c6:	441a      	add	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80042d2:	4b0d      	ldr	r3, [pc, #52]	; (8004308 <UART_SetConfig+0x1b0>)
 80042d4:	fba3 0302 	umull	r0, r3, r3, r2
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	2064      	movs	r0, #100	; 0x64
 80042dc:	fb00 f303 	mul.w	r3, r0, r3
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	3332      	adds	r3, #50	; 0x32
 80042e6:	4a08      	ldr	r2, [pc, #32]	; (8004308 <UART_SetConfig+0x1b0>)
 80042e8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	f003 020f 	and.w	r2, r3, #15
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	440a      	add	r2, r1
 80042f8:	609a      	str	r2, [r3, #8]
}
 80042fa:	bf00      	nop
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40013800 	.word	0x40013800
 8004308:	51eb851f 	.word	0x51eb851f

0800430c <__libc_init_array>:
 800430c:	b570      	push	{r4, r5, r6, lr}
 800430e:	2500      	movs	r5, #0
 8004310:	4e0c      	ldr	r6, [pc, #48]	; (8004344 <__libc_init_array+0x38>)
 8004312:	4c0d      	ldr	r4, [pc, #52]	; (8004348 <__libc_init_array+0x3c>)
 8004314:	1ba4      	subs	r4, r4, r6
 8004316:	10a4      	asrs	r4, r4, #2
 8004318:	42a5      	cmp	r5, r4
 800431a:	d109      	bne.n	8004330 <__libc_init_array+0x24>
 800431c:	f000 f822 	bl	8004364 <_init>
 8004320:	2500      	movs	r5, #0
 8004322:	4e0a      	ldr	r6, [pc, #40]	; (800434c <__libc_init_array+0x40>)
 8004324:	4c0a      	ldr	r4, [pc, #40]	; (8004350 <__libc_init_array+0x44>)
 8004326:	1ba4      	subs	r4, r4, r6
 8004328:	10a4      	asrs	r4, r4, #2
 800432a:	42a5      	cmp	r5, r4
 800432c:	d105      	bne.n	800433a <__libc_init_array+0x2e>
 800432e:	bd70      	pop	{r4, r5, r6, pc}
 8004330:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004334:	4798      	blx	r3
 8004336:	3501      	adds	r5, #1
 8004338:	e7ee      	b.n	8004318 <__libc_init_array+0xc>
 800433a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800433e:	4798      	blx	r3
 8004340:	3501      	adds	r5, #1
 8004342:	e7f2      	b.n	800432a <__libc_init_array+0x1e>
 8004344:	080043dc 	.word	0x080043dc
 8004348:	080043dc 	.word	0x080043dc
 800434c:	080043dc 	.word	0x080043dc
 8004350:	080043e0 	.word	0x080043e0

08004354 <memset>:
 8004354:	4603      	mov	r3, r0
 8004356:	4402      	add	r2, r0
 8004358:	4293      	cmp	r3, r2
 800435a:	d100      	bne.n	800435e <memset+0xa>
 800435c:	4770      	bx	lr
 800435e:	f803 1b01 	strb.w	r1, [r3], #1
 8004362:	e7f9      	b.n	8004358 <memset+0x4>

08004364 <_init>:
 8004364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004366:	bf00      	nop
 8004368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800436a:	bc08      	pop	{r3}
 800436c:	469e      	mov	lr, r3
 800436e:	4770      	bx	lr

08004370 <_fini>:
 8004370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004372:	bf00      	nop
 8004374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004376:	bc08      	pop	{r3}
 8004378:	469e      	mov	lr, r3
 800437a:	4770      	bx	lr
